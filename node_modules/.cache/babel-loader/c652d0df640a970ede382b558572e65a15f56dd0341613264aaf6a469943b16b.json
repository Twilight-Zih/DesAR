{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedModels = [];\n  let controller;\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n      transparent: true,\n      opacity: 0.5\n    }));\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n    setupEventListeners();\n  }\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      if (!checkOverlap(newModel)) {\n        placedModels.push(newModel);\n        scene.add(newModel);\n      } else {\n        alert(\"Warning: Objects cannot overlap!\");\n      }\n    }\n  }\n  function setupEventListeners() {\n    document.addEventListener('dblclick', onDoubleClick);\n    controller.addEventListener(\"selectstart\", showRotateButtons);\n    controller.addEventListener(\"selectend\", hideRotateButtons);\n  }\n  function onDoubleClick(event) {\n    const intersectedObject = getIntersectedObject(event);\n    if (intersectedObject) {\n      scene.remove(intersectedObject);\n      placedModels = placedModels.filter(model => model !== intersectedObject);\n    }\n  }\n  function getIntersectedObject(event) {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedModels);\n    return intersects.length > 0 ? intersects[0].object : null;\n  }\n  function checkOverlap(newModel) {\n    const box = new THREE.Box3().setFromObject(newModel);\n    return placedModels.some(placed => {\n      const placedBox = new THREE.Box3().setFromObject(placed);\n      return box.intersectsBox(placedBox);\n    });\n  }\n  function showRotateButtons() {\n    // Logic to show rotation buttons\n    // You can create HTML buttons dynamically or show hidden buttons\n  }\n  function hideRotateButtons() {\n    // Logic to hide rotation buttons\n  }\n  function rotateObject(direction) {\n    const intersectedObject = getIntersectedObject();\n    if (intersectedObject) {\n      const rotationSpeed = 0.01; // Adjust as necessary\n      if (direction === 'left') {\n        intersectedObject.rotation.y -= rotationSpeed;\n      } else if (direction === 'right') {\n        intersectedObject.rotation.y += rotationSpeed;\n      }\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          reticle.visible = true;\n          reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n          // Ensure reticle only places on horizontal surfaces\n          reticle.position.y = Math.max(0, reticle.position.y);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedModels","controller","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","color","transparent","opacity","matrixAutoUpdate","visible","setupEventListeners","newModel","clone","matrix","decompose","quaternion","scale","scaleFactor","checkOverlap","push","alert","onDoubleClick","showRotateButtons","hideRotateButtons","event","intersectedObject","getIntersectedObject","filter","raycaster","Raycaster","mouse","Vector2","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","object","box","Box3","setFromObject","some","placed","placedBox","intersectsBox","rotateObject","direction","rotationSpeed","rotation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","fromArray","getPose","transform","max","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedModels = [];\n  let controller;\n\n  init();\n  setupFurnitureSelection();\n  animate();\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial({ color: 0x00ff00, transparent: true, opacity: 0.5 })\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    setupEventListeners();\n  }\n\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      \n      if (!checkOverlap(newModel)) {\n        placedModels.push(newModel);\n        scene.add(newModel);\n      } else {\n        alert(\"Warning: Objects cannot overlap!\");\n      }\n    }\n  }\n\n  function setupEventListeners() {\n    document.addEventListener('dblclick', onDoubleClick);\n    controller.addEventListener(\"selectstart\", showRotateButtons);\n    controller.addEventListener(\"selectend\", hideRotateButtons);\n  }\n\n  function onDoubleClick(event) {\n    const intersectedObject = getIntersectedObject(event);\n    if (intersectedObject) {\n      scene.remove(intersectedObject);\n      placedModels = placedModels.filter(model => model !== intersectedObject);\n    }\n  }\n\n  function getIntersectedObject(event) {\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedModels);\n    return intersects.length > 0 ? intersects[0].object : null;\n  }\n\n  function checkOverlap(newModel) {\n    const box = new THREE.Box3().setFromObject(newModel);\n    return placedModels.some(placed => {\n      const placedBox = new THREE.Box3().setFromObject(placed);\n      return box.intersectsBox(placedBox);\n    });\n  }\n\n  function showRotateButtons() {\n    // Logic to show rotation buttons\n    // You can create HTML buttons dynamically or show hidden buttons\n  }\n\n  function hideRotateButtons() {\n    // Logic to hide rotation buttons\n  }\n\n  function rotateObject(direction) {\n    const intersectedObject = getIntersectedObject();\n    if (intersectedObject) {\n      const rotationSpeed = 0.01; // Adjust as necessary\n      if (direction === 'left') {\n        intersectedObject.rotation.y -= rotationSpeed;\n      } else if (direction === 'right') {\n        intersectedObject.rotation.y += rotationSpeed;\n      }\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n\n        hitTestSourceRequested = true;\n      }\n\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          reticle.visible = true;\n          reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n          // Ensure reticle only places on horizontal surfaces\n          reticle.position.y = Math.max(0, reticle.position.y);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n\n    renderer.render(scene, camera);\n  }\n\n  return <div className=\"App\"></div>;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}