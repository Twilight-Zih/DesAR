{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n  let currentlySelectedObject = null;\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    controller.addEventListener(\"select\", () => {\n      // When the controller is used to select, check if we are on a placed object\n      const placedObject = getPlacedObjectUnderReticle(hitTestResults[0]);\n      if (placedObject) {\n        setShowRotateButtons(true);\n      }\n    });\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n    window.addEventListener(\"click\", onClickObject, false); // Add click listener for placed objects\n  }\n\n  function onSelect() {\n    // Removed from here as we are not placing on select\n  }\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n  function getPlacedObjectUnderReticle(hit) {\n    const hitMatrix = new THREE.Matrix4().fromArray(hit.getPose(referenceSpace).transform.matrix);\n    const reticlePosition = new THREE.Vector3();\n    const reticleQuaternion = new THREE.Quaternion();\n    const reticleScale = new THREE.Vector3();\n\n    // Get the reticle's position and quaternion\n    reticle.matrix.decompose(reticlePosition, reticleQuaternion, reticleScale);\n\n    // Check for intersection with placed objects\n    let placedObject = null;\n    scene.traverse(child => {\n      if (child.userData.isPlaced) {\n        const box = new THREE.Box3().setFromObject(child);\n        if (box.containsPoint(reticlePosition)) {\n          placedObject = child; // Found the placed object\n        }\n      }\n    });\n\n    return placedObject;\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n    // Adding event listener for the placed objects\n    scene.traverse(child => {\n      if (child instanceof THREE.Group) {\n        child.userData.isPlaced = true; // Mark the object as placed\n        child.addEventListener('click', event => {\n          // When a placed object is clicked, show rotate buttons\n          setShowRotateButtons(true);\n        });\n      }\n    });\n  }\n\n  // Detect tap and rotate or select an object\n  function onClickObject(event) {\n    const mouse = new THREE.Vector2();\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedObjects);\n    if (intersects.length > 0) {\n      const clickedObject = intersects[0].object;\n\n      // Show rotate buttons when an object is clicked\n      setShowRotateButtons(true);\n      currentlySelectedObject = clickedObject;\n    } else {\n      // Hide rotate buttons if no object is clicked\n      setShowRotateButtons(false);\n      currentlySelectedObject = null;\n    }\n  }\n\n  // Place the object when the button is clicked\n  function placeObject() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some(object => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  // Rotate the object by a specified angle (left or right)\n  function rotateObject(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -Math.PI / 16 : Math.PI / 16; // 11.25 degrees per click\n      currentlySelectedObject.rotation.y += angle;\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix and lock Y-axis to ground level (e.g., y = 0)\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n          // Check if the reticle is over a placed object\n          const placedObject = getPlacedObjectUnderReticle(hit);\n          if (placedObject) {\n            // Show rotate buttons if the reticle is over a placed object\n            setShowRotateButtons(true);\n          } else {\n            // Hide rotate buttons if not over a placed object\n            setShowRotateButtons(false);\n          }\n        } else {\n          reticle.visible = false;\n          setShowRotateButtons(false); // Hide buttons when reticle is not visible\n        }\n      } else {\n        reticle.visible = false;\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"place-button\",\n      onClick: placeObject,\n      disabled: itemSelectedIndex < 0 // Disable if no item is selected\n      ,\n      children: \"Place Object\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), showRotateButtons && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-left\",\n        onClick: () => rotateObject(\"left\"),\n        children: \"\\u2B05\\uFE0F Rotate Left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-right\",\n        onClick: () => rotateObject(\"right\"),\n        children: \"\\u27A1\\uFE0F Rotate Right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T+hHi+Y65T3/UyAGi3PlPAr6LX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","controller","raycaster","Raycaster","currentlySelectedObject","showRotateButtons","setShowRotateButtons","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onSelect","placedObject","getPlacedObjectUnderReticle","hitTestResults","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","onClickObject","onClicked","e","selectItem","index","el","querySelector","classList","target","hit","hitMatrix","Matrix4","fromArray","getPose","referenceSpace","transform","matrix","reticlePosition","Vector3","reticleQuaternion","Quaternion","reticleScale","decompose","traverse","child","userData","isPlaced","box","Box3","setFromObject","containsPoint","preventDefault","stopPropagation","Group","event","mouse","Vector2","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","clickedObject","object","placeObject","newModel","clone","newPosition","quaternion","scale","overlap","some","distance","distanceTo","console","log","scaleFactor","push","rotateObject","direction","angle","rotation","setAnimationLoop","render","timestamp","frame","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","getHitTestResults","copy","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n  let currentlySelectedObject = null;\n\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    controller.addEventListener(\"select\", () => {\n      // When the controller is used to select, check if we are on a placed object\n      const placedObject = getPlacedObjectUnderReticle(hitTestResults[0]);\n      if (placedObject) {\n        setShowRotateButtons(true);\n      }\n    });\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    window.addEventListener(\"click\", onClickObject, false); // Add click listener for placed objects\n  }\n\n  function onSelect() {\n    // Removed from here as we are not placing on select\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n    \n  }\n\n  function getPlacedObjectUnderReticle(hit) {\n    const hitMatrix = new THREE.Matrix4().fromArray(hit.getPose(referenceSpace).transform.matrix);\n    const reticlePosition = new THREE.Vector3();\n    const reticleQuaternion = new THREE.Quaternion();\n    const reticleScale = new THREE.Vector3();\n  \n    // Get the reticle's position and quaternion\n    reticle.matrix.decompose(reticlePosition, reticleQuaternion, reticleScale);\n  \n    // Check for intersection with placed objects\n    let placedObject = null;\n    scene.traverse((child) => {\n      if (child.userData.isPlaced) {\n        const box = new THREE.Box3().setFromObject(child);\n        if (box.containsPoint(reticlePosition)) {\n          placedObject = child; // Found the placed object\n        }\n      }\n    });\n  \n    return placedObject;\n  }\n  \n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n    // Adding event listener for the placed objects\n  scene.traverse((child) => {\n    if (child instanceof THREE.Group) {\n      child.userData.isPlaced = true; // Mark the object as placed\n      child.addEventListener('click', (event) => {\n        // When a placed object is clicked, show rotate buttons\n        setShowRotateButtons(true);\n      });\n    }\n  });\n\n  }\n\n  // Detect tap and rotate or select an object\n  function onClickObject(event) {\n    const mouse = new THREE.Vector2();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedObjects);\n\n    if (intersects.length > 0) {\n      const clickedObject = intersects[0].object;\n\n      // Show rotate buttons when an object is clicked\n      setShowRotateButtons(true);\n      currentlySelectedObject = clickedObject;\n    } else {\n      // Hide rotate buttons if no object is clicked\n      setShowRotateButtons(false);\n      currentlySelectedObject = null;\n    }\n  }\n\n  // Place the object when the button is clicked\n  function placeObject() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some((object) => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  // Rotate the object by a specified angle (left or right)\n  function rotateObject(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -Math.PI / 16 : Math.PI / 16; // 11.25 degrees per click\n      currentlySelectedObject.rotation.y += angle;\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session\n            .requestHitTestSource({ space: referenceSpace })\n            .then(function (source) {\n              hitTestSource = source;\n            });\n        });\n\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n\n        hitTestSourceRequested = true;\n      }\n\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix and lock Y-axis to ground level (e.g., y = 0)\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n          // Check if the reticle is over a placed object\n          const placedObject = getPlacedObjectUnderReticle(hit);\n          if (placedObject) {\n            // Show rotate buttons if the reticle is over a placed object\n            setShowRotateButtons(true);\n          } else {\n            // Hide rotate buttons if not over a placed object\n            setShowRotateButtons(false);\n          }\n          } else {\n            reticle.visible = false;\n            setShowRotateButtons(false); // Hide buttons when reticle is not visible\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n\n    renderer.render(scene, camera);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* Place button */}\n      <button\n        className=\"place-button\"\n        onClick={placeObject}\n        disabled={itemSelectedIndex < 0} // Disable if no item is selected\n      >\n        Place Object\n      </button>\n\n      {/* Rotate buttons */}\n      {showRotateButtons && (\n        <>\n          <button\n            className=\"rotate-button rotate-left\"\n            onClick={() => rotateObject(\"left\")}\n          >\n            ⬅️ Rotate Left\n          </button>\n          <button\n            className=\"rotate-button rotate-right\"\n            onClick={() => rotateObject(\"right\")}\n          >\n            ➡️ Rotate Right\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}