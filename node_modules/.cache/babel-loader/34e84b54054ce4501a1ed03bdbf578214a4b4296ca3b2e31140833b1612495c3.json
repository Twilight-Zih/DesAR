{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = -1; // Start with an invalid index\n  let placedObjects = []; // Track placed objects\n\n  let controller;\n  let currentlySelectedObject = null; // Track object near the reticle\n\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  // Rotation variables\n  let rotationInterval = null;\n  const rotationSpeed = Math.PI / 32; // Adjust for speed of rotation\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n  function onClicked(e, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item${i}`);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item${i}`);\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        onClicked(e, i);\n      });\n    }\n  }\n\n  // Place the object when the button is clicked\n  function placeObject() {\n    if (reticle.visible && itemSelectedIndex >= 0 && itemSelectedIndex < items.length) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some(object => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 1; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n\n      currentlySelectedObject = newModel; // Set the last placed object as selected\n      setShowRotateButtons(true); // Show rotate buttons for the last placed object\n    }\n  }\n\n  function startRotation(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -rotationSpeed : rotationSpeed;\n      rotationInterval = setInterval(() => {\n        currentlySelectedObject.rotation.y += angle;\n      }, 100); // Adjust the interval for smoother rotation\n    }\n  }\n\n  function stopRotation() {\n    clearInterval(rotationInterval);\n    rotationInterval = null;\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n\n          // Check if reticle is close to any placed object\n          let foundNearbyObject = false;\n          placedObjects.forEach(object => {\n            const distance = object.position.distanceTo(reticle.position);\n            if (distance < 1) {\n              // Adjust proximity threshold\n              foundNearbyObject = true;\n              currentlySelectedObject = object; // Set the object as selected\n              setShowRotateButtons(true); // Show rotate buttons\n            }\n          });\n\n          if (!foundNearbyObject) {\n            setShowRotateButtons(false); // Hide rotate buttons if no object nearby\n            currentlySelectedObject = null;\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"place-button\",\n      onClick: placeObject,\n      disabled: itemSelectedIndex < 0 // Disable if no item is selected\n      ,\n      children: \"Place Object\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), showRotateButtons && currentlySelectedObject && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-left\",\n        onMouseDown: () => startRotation(\"left\"),\n        onMouseUp: stopRotation,\n        onTouchStart: () => startRotation(\"left\"),\n        onTouchEnd: stopRotation,\n        children: \"\\u2B05\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-right\",\n        onMouseDown: () => startRotation(\"right\"),\n        onMouseUp: stopRotation,\n        onTouchStart: () => startRotation(\"right\"),\n        onTouchEnd: stopRotation,\n        children: \"\\u27A1\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T+hHi+Y65T3/UyAGi3PlPAr6LX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","controller","currentlySelectedObject","showRotateButtons","setShowRotateButtons","rotationInterval","rotationSpeed","Math","PI","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","Mesh","RingGeometry","rotateX","MeshBasicMaterial","matrixAutoUpdate","visible","onClicked","e","index","el","querySelector","classList","target","preventDefault","placeObject","newModel","clone","newPosition","Vector3","matrix","decompose","quaternion","scale","overlap","some","object","distance","distanceTo","console","log","scaleFactor","push","startRotation","direction","angle","setInterval","rotation","y","stopRotation","clearInterval","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","hitMatrix","getPose","transform","fromArray","Quaternion","copy","foundNearbyObject","forEach","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = -1; // Start with an invalid index\n  let placedObjects = []; // Track placed objects\n\n  let controller;\n  let currentlySelectedObject = null; // Track object near the reticle\n\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  // Rotation variables\n  let rotationInterval = null;\n  const rotationSpeed = Math.PI / 32; // Adjust for speed of rotation\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n\n  function onClicked(e, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item${i}`);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item${i}`);\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        onClicked(e, i);\n      });\n    }\n  }\n\n  // Place the object when the button is clicked\n  function placeObject() {\n    if (reticle.visible && itemSelectedIndex >= 0 && itemSelectedIndex < items.length) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some((object) => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 1; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n\n      currentlySelectedObject = newModel; // Set the last placed object as selected\n      setShowRotateButtons(true); // Show rotate buttons for the last placed object\n    }\n  }\n\n  function startRotation(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -rotationSpeed : rotationSpeed;\n\n      rotationInterval = setInterval(() => {\n        currentlySelectedObject.rotation.y += angle;\n      }, 100); // Adjust the interval for smoother rotation\n    }\n  }\n\n  function stopRotation() {\n    clearInterval(rotationInterval);\n    rotationInterval = null;\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session\n            .requestHitTestSource({ space: referenceSpace })\n            .then(function (source) {\n              hitTestSource = source;\n            });\n        });\n\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n\n        hitTestSourceRequested = true;\n      }\n\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n\n          // Check if reticle is close to any placed object\n          let foundNearbyObject = false;\n\n          placedObjects.forEach((object) => {\n            const distance = object.position.distanceTo(reticle.position);\n            if (distance < 1) { // Adjust proximity threshold\n              foundNearbyObject = true;\n              currentlySelectedObject = object; // Set the object as selected\n              setShowRotateButtons(true); // Show rotate buttons\n            }\n          });\n\n          if (!foundNearbyObject) {\n            setShowRotateButtons(false); // Hide rotate buttons if no object nearby\n            currentlySelectedObject = null;\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n\n    renderer.render(scene, camera);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* Place button */}\n      <button\n        className=\"place-button\"\n        onClick={placeObject}\n        disabled={itemSelectedIndex < 0} // Disable if no item is selected\n      >\n        Place Object\n      </button>\n\n      {/* Rotate buttons */}\n      {showRotateButtons && currentlySelectedObject && (\n        <>\n          <button\n            className=\"rotate-button rotate-left\"\n            onMouseDown={() => startRotation(\"left\")}\n            onMouseUp={stopRotation}\n            onTouchStart={() => startRotation(\"left\")}\n            onTouchEnd={stopRotation}\n          >\n            ⬅️\n          </button>\n          <button\n            className=\"rotate-button rotate-right\"\n            onMouseDown={() => startRotation(\"right\")}\n            onMouseUp={stopRotation}\n            onTouchStart={() => startRotation(\"right\")}\n            onTouchEnd={stopRotation}\n          >\n            ➡️\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}