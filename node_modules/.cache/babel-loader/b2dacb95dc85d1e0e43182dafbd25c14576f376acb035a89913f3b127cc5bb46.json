{"ast":null,"code":"var _s = $RefreshSig$();\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { useEffect, useState } from \"react\";\nfunction App() {\n  _s();\n  const [selectedObject, setSelectedObject] = useState(null);\n  const [placedObjects, setPlacedObjects] = useState([]);\n  const [showWarning, setShowWarning] = useState(false);\n  const [doubleTapTimeout, setDoubleTapTimeout] = useState(null);\n  const [selectedPlacedObject, setSelectedPlacedObject] = useState(null);\n  let scene, camera, renderer, reticle, hitTestSource, controller;\n  let rotateInterval = null;\n  let items = [];\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n  function init() {\n    const myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    loadModels();\n    setupController();\n    setupReticle();\n  }\n  function loadModels() {\n    let modelPaths = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n    let loader = new GLTFLoader();\n    modelPaths.forEach((path, index) => {\n      loader.load(path, glb => {\n        items[index] = glb.scene;\n      });\n    });\n  }\n  function setupFurnitureSelection() {\n    const buttons = document.querySelectorAll(\".button-image\");\n    buttons.forEach((button, index) => {\n      button.addEventListener(\"click\", () => {\n        setSelectedObject(index);\n      });\n    });\n  }\n  function setupController() {\n    controller = renderer.xr.getController(0);\n    scene.add(controller);\n  }\n  function setupReticle() {\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial({\n      color: 0x007bff\n    }));\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n  function placeObject() {\n    if (reticle.visible && selectedObject !== null) {\n      let model = items[selectedObject].clone();\n      model.position.copy(reticle.position);\n      if (detectOverlap(model)) {\n        setShowWarning(true);\n        return;\n      }\n      scene.add(model);\n      setPlacedObjects(prev => [...prev, model]);\n    }\n  }\n  function detectOverlap(model) {\n    return placedObjects.some(obj => {\n      const distance = obj.position.distanceTo(model.position);\n      return distance < 1; // Adjust the threshold as needed\n    });\n  }\n\n  function onSelectObject(object) {\n    // Logic to handle object selection and rotation display\n  }\n  function handleRotation(rotateDirection) {\n    if (!selectedPlacedObject) return;\n    rotateInterval = setInterval(() => {\n      selectedPlacedObject.rotation.y += rotateDirection === \"left\" ? -0.01 : 0.01;\n    }, 10);\n  }\n  function stopRotation() {\n    clearInterval(rotateInterval);\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render() {\n    renderer.render(scene, camera);\n  }\n\n  // Add event listeners and other functionality below...\n}\n_s(App, \"/tSrb7KmZIL1P9QpAGTsEup1zqU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","useEffect","useState","App","_s","selectedObject","setSelectedObject","placedObjects","setPlacedObjects","showWarning","setShowWarning","doubleTapTimeout","setDoubleTapTimeout","selectedPlacedObject","setSelectedPlacedObject","scene","camera","renderer","reticle","hitTestSource","controller","rotateInterval","items","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","light","HemisphereLight","position","set","add","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","loadModels","setupController","setupReticle","modelPaths","loader","forEach","path","index","load","glb","buttons","querySelectorAll","button","addEventListener","getController","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","color","matrixAutoUpdate","visible","placeObject","model","clone","copy","detectOverlap","prev","some","obj","distance","distanceTo","onSelectObject","object","handleRotation","rotateDirection","setInterval","rotation","y","stopRotation","clearInterval","setAnimationLoop","render","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [selectedObject, setSelectedObject] = useState(null);\n  const [placedObjects, setPlacedObjects] = useState([]);\n  const [showWarning, setShowWarning] = useState(false);\n  const [doubleTapTimeout, setDoubleTapTimeout] = useState(null);\n  const [selectedPlacedObject, setSelectedPlacedObject] = useState(null);\n  let scene, camera, renderer, reticle, hitTestSource, controller;\n  let rotateInterval = null;\n  let items = [];\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n\n  function init() {\n    const myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    loadModels();\n    setupController();\n    setupReticle();\n  }\n\n  function loadModels() {\n    let modelPaths = [\n      \"./dylan_armchair_yolk_yellow.glb\",\n      \"./ivan_armchair_mineral_blue.glb\",\n      \"./marble_coffee_table.glb\",\n      \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n      \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n      \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n    ];\n    let loader = new GLTFLoader();\n    modelPaths.forEach((path, index) => {\n      loader.load(path, (glb) => {\n        items[index] = glb.scene;\n      });\n    });\n  }\n\n  function setupFurnitureSelection() {\n    const buttons = document.querySelectorAll(\".button-image\");\n    buttons.forEach((button, index) => {\n      button.addEventListener(\"click\", () => {\n        setSelectedObject(index);\n      });\n    });\n  }\n\n  function setupController() {\n    controller = renderer.xr.getController(0);\n    scene.add(controller);\n  }\n\n  function setupReticle() {\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial({ color: 0x007bff })\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n\n  function placeObject() {\n    if (reticle.visible && selectedObject !== null) {\n      let model = items[selectedObject].clone();\n      model.position.copy(reticle.position);\n\n      if (detectOverlap(model)) {\n        setShowWarning(true);\n        return;\n      }\n\n      scene.add(model);\n      setPlacedObjects((prev) => [...prev, model]);\n    }\n  }\n\n  function detectOverlap(model) {\n    return placedObjects.some((obj) => {\n      const distance = obj.position.distanceTo(model.position);\n      return distance < 1; // Adjust the threshold as needed\n    });\n  }\n\n  function onSelectObject(object) {\n    // Logic to handle object selection and rotation display\n  }\n\n  function handleRotation(rotateDirection) {\n    if (!selectedPlacedObject) return;\n    rotateInterval = setInterval(() => {\n      selectedPlacedObject.rotation.y +=\n        rotateDirection === \"left\" ? -0.01 : 0.01;\n    }, 10);\n  }\n\n  function stopRotation() {\n    clearInterval(rotateInterval);\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render() {\n    renderer.render(scene, camera);\n  }\n\n  // Add event listeners and other functionality below...\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}