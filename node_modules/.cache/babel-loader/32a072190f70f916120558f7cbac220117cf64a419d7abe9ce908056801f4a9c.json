{"ast":null,"code":"import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = new Set(); // Track placed objects\n  let controller;\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onPlace);\n    controller.addEventListener(\"selectstart\", onSelectStart);\n    controller.addEventListener(\"selectend\", onSelectEnd);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    // Add rotate buttons\n    createRotateButtons();\n  }\n  function createRotateButtons() {\n    const leftButton = document.createElement(\"button\");\n    leftButton.innerText = \"Rotate Left\";\n    leftButton.style.position = \"absolute\";\n    leftButton.style.left = \"10px\";\n    leftButton.style.top = \"50%\";\n    leftButton.style.zIndex = 1;\n    leftButton.style.display = \"none\";\n    leftButton.addEventListener(\"mousedown\", () => rotateSelectedObject(-0.1));\n    leftButton.addEventListener(\"mouseup\", () => stopRotation());\n    leftButton.addEventListener(\"mouseleave\", () => stopRotation());\n    document.body.appendChild(leftButton);\n    const rightButton = document.createElement(\"button\");\n    rightButton.innerText = \"Rotate Right\";\n    rightButton.style.position = \"absolute\";\n    rightButton.style.right = \"10px\";\n    rightButton.style.top = \"50%\";\n    rightButton.style.zIndex = 1;\n    rightButton.style.display = \"none\";\n    rightButton.addEventListener(\"mousedown\", () => rotateSelectedObject(0.1));\n    rightButton.addEventListener(\"mouseup\", () => stopRotation());\n    rightButton.addEventListener(\"mouseleave\", () => stopRotation());\n    document.body.appendChild(rightButton);\n  }\n  let selectedObject = null;\n  let rotationInterval;\n  function onSelectStart(event) {\n    const intersects = getIntersects(event.target);\n    if (intersects.length > 0) {\n      selectedObject = intersects[0].object;\n\n      // Show rotate buttons\n      document.querySelector('button[innerText=\"Rotate Left\"]').style.display = \"block\";\n      document.querySelector('button[innerText=\"Rotate Right\"]').style.display = \"block\";\n    } else {\n      selectedObject = null;\n      hideRotateButtons();\n    }\n  }\n  function onSelectEnd() {\n    hideRotateButtons();\n  }\n  function hideRotateButtons() {\n    document.querySelector('button[innerText=\"Rotate Left\"]').style.display = \"none\";\n    document.querySelector('button[innerText=\"Rotate Right\"]').style.display = \"none\";\n  }\n  function stopRotation() {\n    clearInterval(rotationInterval);\n  }\n  function rotateSelectedObject(direction) {\n    if (selectedObject) {\n      rotationInterval = setInterval(() => {\n        selectedObject.rotation.y += direction;\n      }, 16); // approximately 60 FPS\n    }\n  }\n\n  function onPlace() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      // Check for overlapping objects\n      if (isOverlapping(newModel)) {\n        alert(\"Cannot place object here due to overlap.\");\n        return;\n      }\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n\n      // Snap model to floor\n      newModel.position.y = 0; // Ensure it's placed on the floor\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      // Add model to the scene and track it\n      placedObjects.add(newModel);\n      scene.add(newModel);\n      addDoubleTapRemove(newModel);\n    }\n  }\n  function addDoubleTapRemove(object) {\n    let lastTap = 0;\n    object.userData.doubleTapHandler = event => {\n      const currentTime = new Date().getTime();\n      if (currentTime - lastTap < 300) {\n        // Double tap detected\n        scene.remove(object);\n        placedObjects.delete(object);\n      }\n      lastTap = currentTime;\n    };\n    renderer.domElement.addEventListener(\"dblclick\", object.userData.doubleTapHandler);\n  }\n  function isOverlapping(newModel) {\n    for (const placedObject of placedObjects) {\n      if (placedObject !== newModel) {\n        const boxA = new THREE.Box3().setFromObject(newModel);\n        const boxB = new THREE.Box3().setFromObject(placedObject);\n        if (boxA.intersectsBox(boxB)) {\n          return true; // Overlap detected\n        }\n      }\n    }\n\n    return false; // No overlaps\n  }\n\n  function getIntersects(controller) {\n    const tempMatrix = new THREE.Matrix4();\n    const userData = controller.userData;\n    const intersects = [];\n    if (userData && userData.pointer) {\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      const raycaster = new THREE.Raycaster();\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      for (const placedObject of placedObjects) {\n        if (placedObject instanceof THREE.Mesh) {\n          const box = new THREE.Box3().setFromObject(placedObject);\n          if (raycaster.intersectObject(placedObject, true).length > 0) {\n            intersects.push({\n              object: placedObject,\n              box\n            });\n          }\n        }\n      }\n    }\n    return intersects;\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item${i}`);\n\n      // Use an IIFE to create a new scope for each index\n      (function (index) {\n        el.addEventListener(\"click\", e => {\n          e.preventDefault();\n          e.stopPropagation();\n          itemSelectedIndex = index; // Set itemSelectedIndex to the current index\n\n          // Remove image selection from others to indicate unclicked\n          for (let j = 0; j < models.length; j++) {\n            const itemEl = document.querySelector(`#item${j}`);\n            itemEl.classList.remove(\"clicked\");\n          }\n          // Set image to selected\n          e.target.classList.add(\"clicked\");\n        });\n      })(i); // Immediately invoke with the current value of `i`\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(() => {\n      if (reticle.visible) {\n        // Update reticle position based on hit test results\n        if (hitTestSourceRequested) {\n          const hitTestResults = renderer.xr.getHitTestResults(hitTestSource);\n          if (hitTestResults.length) {\n            const hit = hitTestResults[0];\n            reticle.visible = true;\n            reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n          } else {\n            reticle.visible = false;\n          }\n        }\n      }\n\n      // Render the scene\n      renderer.render(scene, camera);\n    });\n  }\n  return null; // Returning null as we don't have JSX in this component\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","Set","controller","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onPlace","onSelectStart","onSelectEnd","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","createRotateButtons","leftButton","createElement","innerText","left","top","zIndex","display","rotateSelectedObject","stopRotation","rightButton","right","selectedObject","rotationInterval","event","intersects","getIntersects","target","object","querySelector","hideRotateButtons","clearInterval","direction","setInterval","rotation","y","newModel","clone","isOverlapping","alert","matrix","decompose","quaternion","scale","scaleFactor","addDoubleTapRemove","lastTap","userData","doubleTapHandler","currentTime","Date","getTime","delete","domElement","placedObject","boxA","Box3","setFromObject","boxB","intersectsBox","tempMatrix","Matrix4","pointer","identity","extractRotation","matrixWorld","raycaster","Raycaster","ray","origin","setFromMatrixPosition","applyMatrix4","box","intersectObject","push","el","index","e","preventDefault","stopPropagation","j","itemEl","classList","setAnimationLoop","hitTestResults","getHitTestResults","hit","fromArray","getPose","referenceSpace","transform","render","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = new Set(); // Track placed objects\n  let controller;\n\n  init();\n  setupFurnitureSelection();\n  animate();\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onPlace);\n    controller.addEventListener(\"selectstart\", onSelectStart);\n    controller.addEventListener(\"selectend\", onSelectEnd);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    // Add rotate buttons\n    createRotateButtons();\n  }\n\n  function createRotateButtons() {\n    const leftButton = document.createElement(\"button\");\n    leftButton.innerText = \"Rotate Left\";\n    leftButton.style.position = \"absolute\";\n    leftButton.style.left = \"10px\";\n    leftButton.style.top = \"50%\";\n    leftButton.style.zIndex = 1;\n    leftButton.style.display = \"none\";\n    leftButton.addEventListener(\"mousedown\", () => rotateSelectedObject(-0.1));\n    leftButton.addEventListener(\"mouseup\", () => stopRotation());\n    leftButton.addEventListener(\"mouseleave\", () => stopRotation());\n    document.body.appendChild(leftButton);\n\n    const rightButton = document.createElement(\"button\");\n    rightButton.innerText = \"Rotate Right\";\n    rightButton.style.position = \"absolute\";\n    rightButton.style.right = \"10px\";\n    rightButton.style.top = \"50%\";\n    rightButton.style.zIndex = 1;\n    rightButton.style.display = \"none\";\n    rightButton.addEventListener(\"mousedown\", () => rotateSelectedObject(0.1));\n    rightButton.addEventListener(\"mouseup\", () => stopRotation());\n    rightButton.addEventListener(\"mouseleave\", () => stopRotation());\n    document.body.appendChild(rightButton);\n  }\n\n  let selectedObject = null;\n  let rotationInterval;\n\n  function onSelectStart(event) {\n    const intersects = getIntersects(event.target);\n\n    if (intersects.length > 0) {\n      selectedObject = intersects[0].object;\n\n      // Show rotate buttons\n      document.querySelector('button[innerText=\"Rotate Left\"]').style.display = \"block\";\n      document.querySelector('button[innerText=\"Rotate Right\"]').style.display = \"block\";\n    } else {\n      selectedObject = null;\n      hideRotateButtons();\n    }\n  }\n\n  function onSelectEnd() {\n    hideRotateButtons();\n  }\n\n  function hideRotateButtons() {\n    document.querySelector('button[innerText=\"Rotate Left\"]').style.display = \"none\";\n    document.querySelector('button[innerText=\"Rotate Right\"]').style.display = \"none\";\n  }\n\n  function stopRotation() {\n    clearInterval(rotationInterval);\n  }\n\n  function rotateSelectedObject(direction) {\n    if (selectedObject) {\n      rotationInterval = setInterval(() => {\n        selectedObject.rotation.y += direction;\n      }, 16); // approximately 60 FPS\n    }\n  }\n\n  function onPlace() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      // Check for overlapping objects\n      if (isOverlapping(newModel)) {\n        alert(\"Cannot place object here due to overlap.\");\n        return;\n      }\n\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n\n      // Snap model to floor\n      newModel.position.y = 0; // Ensure it's placed on the floor\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      // Add model to the scene and track it\n      placedObjects.add(newModel);\n      scene.add(newModel);\n      addDoubleTapRemove(newModel);\n    }\n  }\n\n  function addDoubleTapRemove(object) {\n    let lastTap = 0;\n    object.userData.doubleTapHandler = (event) => {\n      const currentTime = new Date().getTime();\n      if (currentTime - lastTap < 300) {\n        // Double tap detected\n        scene.remove(object);\n        placedObjects.delete(object);\n      }\n      lastTap = currentTime;\n    };\n\n    renderer.domElement.addEventListener(\"dblclick\", object.userData.doubleTapHandler);\n  }\n\n  function isOverlapping(newModel) {\n    for (const placedObject of placedObjects) {\n      if (placedObject !== newModel) {\n        const boxA = new THREE.Box3().setFromObject(newModel);\n        const boxB = new THREE.Box3().setFromObject(placedObject);\n        if (boxA.intersectsBox(boxB)) {\n          return true; // Overlap detected\n        }\n      }\n    }\n    return false; // No overlaps\n  }\n\n  function getIntersects(controller) {\n    const tempMatrix = new THREE.Matrix4();\n    const userData = controller.userData;\n    const intersects = [];\n    if (userData && userData.pointer) {\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      const raycaster = new THREE.Raycaster();\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n\n      for (const placedObject of placedObjects) {\n        if (placedObject instanceof THREE.Mesh) {\n          const box = new THREE.Box3().setFromObject(placedObject);\n          if (raycaster.intersectObject(placedObject, true).length > 0) {\n            intersects.push({ object: placedObject, box });\n          }\n        }\n      }\n    }\n    return intersects;\n  }\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item${i}`);\n\n      // Use an IIFE to create a new scope for each index\n      (function(index) {\n        el.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          itemSelectedIndex = index; // Set itemSelectedIndex to the current index\n\n          // Remove image selection from others to indicate unclicked\n          for (let j = 0; j < models.length; j++) {\n            const itemEl = document.querySelector(`#item${j}`);\n            itemEl.classList.remove(\"clicked\");\n          }\n          // Set image to selected\n          e.target.classList.add(\"clicked\");\n        });\n      })(i); // Immediately invoke with the current value of `i`\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(() => {\n      if (reticle.visible) {\n        // Update reticle position based on hit test results\n        if (hitTestSourceRequested) {\n          const hitTestResults = renderer.xr.getHitTestResults(hitTestSource);\n          if (hitTestResults.length) {\n            const hit = hitTestResults[0];\n            reticle.visible = true;\n            reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\n          } else {\n            reticle.visible = false;\n          }\n        }\n      }\n\n      // Render the scene\n      renderer.render(scene, camera);\n    });\n  }\n\n  return null; // Returning null as we don't have JSX in this component\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}