{"ast":null,"code":"function onPlaceButtonClicked() {\n  if (reticle.visible) {\n    // Ensure the model is loaded and clone it safely\n    const originalModel = items[itemSelectedIndex];\n    if (!originalModel) {\n      console.error('Model not found or not yet loaded.');\n      return;\n    }\n    const newModel = originalModel.clone(); // Attempt to clone the model\n\n    if (!newModel) {\n      console.error('Error cloning the model');\n      return;\n    }\n\n    // Manually clone any children if needed (sometimes helps if clone() fails)\n    newModel.traverse(child => {\n      if (child.isMesh) {\n        child.material = child.material.clone(); // Clone material\n        child.geometry = child.geometry.clone(); // Clone geometry\n      }\n    });\n\n    newModel.visible = true;\n\n    // Decompose reticle's position and apply to new model\n    reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n\n    // Check if the object is far enough from existing objects\n    if (canPlaceObject(newModel.position)) {\n      // Set the scale of the new model\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      // Add the new model to the scene\n      scene.add(newModel);\n\n      // Store the new model in the placed objects stack\n      placedObjects.push(newModel);\n\n      // Keep reference to the last placed object\n      lastPlacedObject = newModel;\n    } else {\n      console.log(\"Object is too close to another object.\");\n    }\n  }\n}","map":{"version":3,"names":["onPlaceButtonClicked","reticle","visible","originalModel","items","itemSelectedIndex","console","error","newModel","clone","traverse","child","isMesh","material","geometry","matrix","decompose","position","quaternion","scale","canPlaceObject","scaleFactor","modelScaleFactor","set","scene","add","placedObjects","push","lastPlacedObject","log"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["function onPlaceButtonClicked() {\n  if (reticle.visible) {\n    // Ensure the model is loaded and clone it safely\n    const originalModel = items[itemSelectedIndex];\n    \n    if (!originalModel) {\n      console.error('Model not found or not yet loaded.');\n      return;\n    }\n\n    const newModel = originalModel.clone(); // Attempt to clone the model\n\n    if (!newModel) {\n      console.error('Error cloning the model');\n      return;\n    }\n\n    // Manually clone any children if needed (sometimes helps if clone() fails)\n    newModel.traverse((child) => {\n      if (child.isMesh) {\n        child.material = child.material.clone();  // Clone material\n        child.geometry = child.geometry.clone();  // Clone geometry\n      }\n    });\n\n    newModel.visible = true;\n\n    // Decompose reticle's position and apply to new model\n    reticle.matrix.decompose(\n      newModel.position,\n      newModel.quaternion,\n      newModel.scale\n    );\n\n    // Check if the object is far enough from existing objects\n    if (canPlaceObject(newModel.position)) {\n      // Set the scale of the new model\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      // Add the new model to the scene\n      scene.add(newModel);\n\n      // Store the new model in the placed objects stack\n      placedObjects.push(newModel);\n\n      // Keep reference to the last placed object\n      lastPlacedObject = newModel;\n    } else {\n      console.log(\"Object is too close to another object.\");\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,oBAAoBA,CAAA,EAAG;EAC9B,IAAIC,OAAO,CAACC,OAAO,EAAE;IACnB;IACA,MAAMC,aAAa,GAAGC,KAAK,CAACC,iBAAiB,CAAC;IAE9C,IAAI,CAACF,aAAa,EAAE;MAClBG,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACF;IAEA,MAAMC,QAAQ,GAAGL,aAAa,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;;IAExC,IAAI,CAACD,QAAQ,EAAE;MACbF,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxC;IACF;;IAEA;IACAC,QAAQ,CAACE,QAAQ,CAAEC,KAAK,IAAK;MAC3B,IAAIA,KAAK,CAACC,MAAM,EAAE;QAChBD,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAE;QAC1CE,KAAK,CAACG,QAAQ,GAAGH,KAAK,CAACG,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC,CAAE;MAC5C;IACF,CAAC,CAAC;;IAEFD,QAAQ,CAACN,OAAO,GAAG,IAAI;;IAEvB;IACAD,OAAO,CAACc,MAAM,CAACC,SAAS,CACtBR,QAAQ,CAACS,QAAQ,EACjBT,QAAQ,CAACU,UAAU,EACnBV,QAAQ,CAACW,KACX,CAAC;;IAED;IACA,IAAIC,cAAc,CAACZ,QAAQ,CAACS,QAAQ,CAAC,EAAE;MACrC;MACA,IAAII,WAAW,GAAGC,gBAAgB,CAACjB,iBAAiB,CAAC;MACrDG,QAAQ,CAACW,KAAK,CAACI,GAAG,CAACF,WAAW,EAAEA,WAAW,EAAEA,WAAW,CAAC;;MAEzD;MACAG,KAAK,CAACC,GAAG,CAACjB,QAAQ,CAAC;;MAEnB;MACAkB,aAAa,CAACC,IAAI,CAACnB,QAAQ,CAAC;;MAE5B;MACAoB,gBAAgB,GAAGpB,QAAQ;IAC7B,CAAC,MAAM;MACLF,OAAO,CAACuB,GAAG,CAAC,wCAAwC,CAAC;IACvD;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}