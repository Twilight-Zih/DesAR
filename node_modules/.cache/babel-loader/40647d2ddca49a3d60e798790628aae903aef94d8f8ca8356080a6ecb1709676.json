{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let currentlySelectedObject = null; // Track object near the reticle\n\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n  function onSelect() {\n    // Removed from here as we are not placing on select\n  }\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Place the object when the button is clicked\n  function placeObject() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some(object => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n\n      setShowRotateButtons(false);\n    }\n  }\n\n  // Rotate the object by a specified angle (left or right)\n  function rotateObject(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -Math.PI / 16 : Math.PI / 16; // 11.25 degrees per click\n      currentlySelectedObject.rotation.y += angle;\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (!hitTestSourceRequested) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n          reticle.matrix.decompose(position, quaternion, scale);\n\n          // Lock the reticle to the ground level\n          position.y = Math.max(position.y, 0.1); // Raise above ground level\n          reticle.position.copy(position);\n\n          // Cast a ray to check for walls\n          const direction = new THREE.Vector3(0, -1, 0); // Downwards\n          const raycaster = new THREE.Raycaster(position.clone().setY(position.y + 0.1), direction); // Start slightly above the reticle\n          const intersects = raycaster.intersectObjects(placedObjects, true); // 'true' to check all descendants\n\n          if (intersects.length > 0) {\n            // If the reticle is colliding with an object, adjust its position\n            reticle.position.y = intersects[0].point.y + 0.1; // Adjust to be above the wall\n          }\n\n          // Check proximity to placed objects to show rotate buttons\n          let foundNearbyObject = false;\n          placedObjects.forEach(object => {\n            const distance = object.position.distanceTo(reticle.position);\n            if (distance < 0.5) {\n              // Proximity threshold\n              foundNearbyObject = true;\n              currentlySelectedObject = object; // Set the object as selected\n            }\n          });\n\n          // Show/hide rotate buttons based on proximity to placed objects\n          setShowRotateButtons(foundNearbyObject);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"place-button\",\n      onClick: placeObject,\n      disabled: itemSelectedIndex < 0 // Disable if no item is selected\n      ,\n      children: \"Place Object\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), showRotateButtons && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-left\",\n        onClick: () => rotateObject(\"left\"),\n        children: \"\\u2B05\\uFE0F Rotate Left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-right\",\n        onClick: () => rotateObject(\"right\"),\n        children: \"\\u27A1\\uFE0F Rotate Right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T+hHi+Y65T3/UyAGi3PlPAr6LX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","controller","currentlySelectedObject","showRotateButtons","setShowRotateButtons","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","onClicked","e","selectItem","index","el","querySelector","classList","target","preventDefault","stopPropagation","placeObject","newModel","clone","newPosition","Vector3","matrix","decompose","quaternion","scale","overlap","some","object","distance","distanceTo","console","log","scaleFactor","push","rotateObject","direction","angle","rotation","y","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","hitMatrix","getPose","transform","fromArray","Quaternion","max","copy","raycaster","Raycaster","setY","intersects","intersectObjects","point","foundNearbyObject","forEach","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let currentlySelectedObject = null; // Track object near the reticle\n\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, []);\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n   scene = new THREE.Scene();\n   camera = new THREE.PerspectiveCamera(\n       70,\n       myCanvas.innerWidth / myCanvas.innerHeight,\n       0.01,\n       20\n   );\n\n   const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n   light.position.set(0.5, 1, 0.25);\n   scene.add(light);\n\n   renderer = new THREE.WebGLRenderer({\n       canvas: myCanvas,\n       antialias: true,\n       alpha: true,\n   });\n   renderer.setPixelRatio(window.devicePixelRatio);\n   renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n   renderer.xr.enabled = true;\n   \n   const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n  }\n\n  function onSelect() {\n    // Removed from here as we are not placing on select\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Place the object when the button is clicked\n  function placeObject() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some((object) => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n\n      setShowRotateButtons(false);\n    }\n  }\n\n  // Rotate the object by a specified angle (left or right)\n  function rotateObject(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -Math.PI / 16 : Math.PI / 16; // 11.25 degrees per click\n      currentlySelectedObject.rotation.y += angle;\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n        const referenceSpace = renderer.xr.getReferenceSpace();\n        const session = renderer.xr.getSession();\n\n        if (!hitTestSourceRequested) {\n            session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n                session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\n                    hitTestSource = source;\n                });\n            });\n\n            session.addEventListener(\"end\", function () {\n                hitTestSourceRequested = false;\n                hitTestSource = null;\n            });\n\n            hitTestSourceRequested = true;\n        }\n\n        if (hitTestSource) {\n            const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n            if (hitTestResults.length) {\n                const hit = hitTestResults[0];\n                const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n\n                reticle.visible = true;\n                reticle.matrix.fromArray(hitMatrix);\n\n                // Decompose the reticle matrix\n                const position = new THREE.Vector3();\n                const quaternion = new THREE.Quaternion();\n                const scale = new THREE.Vector3();\n\n                reticle.matrix.decompose(position, quaternion, scale);\n\n                // Lock the reticle to the ground level\n                position.y = Math.max(position.y, 0.1); // Raise above ground level\n                reticle.position.copy(position);\n\n                // Cast a ray to check for walls\n                const direction = new THREE.Vector3(0, -1, 0); // Downwards\n                const raycaster = new THREE.Raycaster(position.clone().setY(position.y + 0.1), direction); // Start slightly above the reticle\n                const intersects = raycaster.intersectObjects(placedObjects, true); // 'true' to check all descendants\n\n                if (intersects.length > 0) {\n                    // If the reticle is colliding with an object, adjust its position\n                    reticle.position.y = intersects[0].point.y + 0.1; // Adjust to be above the wall\n                }\n\n                // Check proximity to placed objects to show rotate buttons\n                let foundNearbyObject = false;\n                placedObjects.forEach((object) => {\n                    const distance = object.position.distanceTo(reticle.position);\n                    if (distance < 0.5) { // Proximity threshold\n                        foundNearbyObject = true;\n                        currentlySelectedObject = object; // Set the object as selected\n                    }\n                });\n\n                // Show/hide rotate buttons based on proximity to placed objects\n                setShowRotateButtons(foundNearbyObject);\n            } else {\n                reticle.visible = false;\n            }\n        }\n    }\n\n    renderer.render(scene, camera);\n}\n\n\n  return (\n    <div className=\"App\">\n      {/* Place button */}\n      <button\n        className=\"place-button\"\n        onClick={placeObject}\n        disabled={itemSelectedIndex < 0} // Disable if no item is selected\n      >\n        Place Object\n      </button>\n\n      {/* Rotate buttons */}\n      {showRotateButtons && (\n        <>\n          <button\n            className=\"rotate-button rotate-left\"\n            onClick={() => rotateObject(\"left\")}\n          >\n            ⬅️ Rotate Left\n          </button>\n          <button\n            className=\"rotate-button rotate-right\"\n            onClick={() => rotateObject(\"right\")}\n          >\n            ➡️ Rotate Right\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}