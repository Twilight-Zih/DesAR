{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let doubleTapTime = 0; // Track the time for detecting double taps\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n\n  // Variables for dragging-based rotation\n  let isDragging = false;\n  let previousX = 0;\n  let selectedObject = null;\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.clientWidth / myCanvas.clientHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    // Load all models\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    // Add event listeners for double-tap and dragging\n    window.addEventListener(\"dblclick\", onDoubleTap, false);\n    window.addEventListener(\"pointerdown\", onPointerDown, false);\n    window.addEventListener(\"pointermove\", onPointerMove, false);\n    window.addEventListener(\"pointerup\", onPointerUp, false);\n\n    // Handle window resize\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n  function onWindowResize() {\n    let myCanvas = document.getElementById(\"canvas\");\n    camera.aspect = myCanvas.clientWidth / myCanvas.clientHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n  }\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some(object => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Detect double-tap and remove the tapped object\n  function onDoubleTap(event) {\n    if (performance.now() - doubleTapTime < 300) {\n      // We have a double-tap\n      const mouse = new THREE.Vector2();\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(placedObjects, true);\n      if (intersects.length > 0) {\n        const objectToRemove = intersects[0].object.parent || intersects[0].object;\n        scene.remove(objectToRemove);\n        placedObjects = placedObjects.filter(obj => obj !== objectToRemove);\n        console.log(\"Object removed on double-tap.\");\n      }\n    }\n    doubleTapTime = performance.now(); // Reset double-tap timer\n  }\n\n  // Handle pointer down event for dragging-based rotation\n  function onPointerDown(event) {\n    // Start dragging and store the initial X position\n    isDragging = true;\n    previousX = event.clientX;\n\n    // Use raycasting to select the object under the pointer\n    const mouse = new THREE.Vector2();\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedObjects, true);\n    if (intersects.length > 0) {\n      selectedObject = intersects[0].object.parent || intersects[0].object;\n    }\n  }\n\n  // Handle pointer move event for dragging-based rotation\n  function onPointerMove(event) {\n    if (isDragging && selectedObject) {\n      const deltaX = event.clientX - previousX;\n      const rotationSpeed = 0.005; // Adjust rotation speed as needed\n      selectedObject.rotation.y += deltaX * rotationSpeed;\n\n      // Update the previous X position for the next movement calculation\n      previousX = event.clientX;\n    }\n  }\n\n  // Handle pointer up event to end dragging\n  function onPointerUp() {\n    isDragging = false;\n    selectedObject = null;\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length > 0) {\n          const hit = hitTestResults[0];\n          const hitPose = hit.getPose(referenceSpace);\n          const hitMatrix = new THREE.Matrix4().fromArray(hitPose.transform.matrix);\n\n          // Extract the normal vector from the hit matrix\n          const normal = new THREE.Vector3(0, 1, 0).applyQuaternion(new THREE.Quaternion().setFromRotationMatrix(hitMatrix));\n\n          // Define a threshold for how horizontal the plane should be\n          const horizontalThreshold = 0.6; // Adjust between 0 (vertical) to 1 (horizontal)\n\n          if (normal.y > horizontalThreshold) {\n            // The plane is sufficiently horizontal\n            reticle.visible = true;\n            reticle.matrix.fromArray(hitPose.transform.matrix);\n          } else {\n            // The plane is not horizontal; hide the reticle\n            reticle.visible = false;\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","controller","doubleTapTime","raycaster","Raycaster","isDragging","previousX","selectedObject","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","clientWidth","clientHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","onDoubleTap","onPointerDown","onPointerMove","onPointerUp","onWindowResize","aspect","updateProjectionMatrix","newModel","clone","newPosition","Vector3","matrix","decompose","quaternion","scale","overlap","some","object","distance","distanceTo","console","log","scaleFactor","push","onClicked","e","selectItem","index","el","querySelector","classList","target","preventDefault","stopPropagation","event","performance","now","mouse","Vector2","x","clientX","innerWidth","y","clientY","innerHeight","setFromCamera","intersects","intersectObjects","objectToRemove","parent","filter","obj","deltaX","rotationSpeed","rotation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","hitPose","getPose","hitMatrix","Matrix4","fromArray","transform","normal","applyQuaternion","Quaternion","setFromRotationMatrix","horizontalThreshold","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let doubleTapTime = 0; // Track the time for detecting double taps\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n\n  // Variables for dragging-based rotation\n  let isDragging = false;\n  let previousX = 0;\n  let selectedObject = null;\n\n  init();\n  setupFurnitureSelection();\n  animate();\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.clientWidth / myCanvas.clientHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    // Load all models\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    // Add event listeners for double-tap and dragging\n    window.addEventListener(\"dblclick\", onDoubleTap, false);\n    window.addEventListener(\"pointerdown\", onPointerDown, false);\n    window.addEventListener(\"pointermove\", onPointerMove, false);\n    window.addEventListener(\"pointerup\", onPointerUp, false);\n\n    // Handle window resize\n    window.addEventListener(\"resize\", onWindowResize, false);\n  }\n\n  function onWindowResize() {\n    let myCanvas = document.getElementById(\"canvas\");\n    camera.aspect = myCanvas.clientWidth / myCanvas.clientHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n  }\n\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some((object) => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Detect double-tap and remove the tapped object\n  function onDoubleTap(event) {\n    if (performance.now() - doubleTapTime < 300) {\n      // We have a double-tap\n      const mouse = new THREE.Vector2();\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(placedObjects, true);\n\n      if (intersects.length > 0) {\n        const objectToRemove = intersects[0].object.parent || intersects[0].object;\n        scene.remove(objectToRemove);\n        placedObjects = placedObjects.filter(obj => obj !== objectToRemove);\n        console.log(\"Object removed on double-tap.\");\n      }\n    }\n\n    doubleTapTime = performance.now(); // Reset double-tap timer\n  }\n\n  // Handle pointer down event for dragging-based rotation\n  function onPointerDown(event) {\n    // Start dragging and store the initial X position\n    isDragging = true;\n    previousX = event.clientX;\n\n    // Use raycasting to select the object under the pointer\n    const mouse = new THREE.Vector2();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedObjects, true);\n\n    if (intersects.length > 0) {\n      selectedObject = intersects[0].object.parent || intersects[0].object;\n    }\n  }\n\n  // Handle pointer move event for dragging-based rotation\n  function onPointerMove(event) {\n    if (isDragging && selectedObject) {\n      const deltaX = event.clientX - previousX;\n      const rotationSpeed = 0.005; // Adjust rotation speed as needed\n      selectedObject.rotation.y += deltaX * rotationSpeed;\n\n      // Update the previous X position for the next movement calculation\n      previousX = event.clientX;\n    }\n  }\n\n  // Handle pointer up event to end dragging\n  function onPointerUp() {\n    isDragging = false;\n    selectedObject = null;\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n  \n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({ space: referenceSpace }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n  \n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n  \n        hitTestSourceRequested = true;\n      }\n  \n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n  \n        if (hitTestResults.length > 0) {\n          const hit = hitTestResults[0];\n          const hitPose = hit.getPose(referenceSpace);\n          const hitMatrix = new THREE.Matrix4().fromArray(hitPose.transform.matrix);\n  \n          // Extract the normal vector from the hit matrix\n          const normal = new THREE.Vector3(0, 1, 0).applyQuaternion(\n            new THREE.Quaternion().setFromRotationMatrix(hitMatrix)\n          );\n  \n          // Define a threshold for how horizontal the plane should be\n          const horizontalThreshold = 0.6; // Adjust between 0 (vertical) to 1 (horizontal)\n  \n          if (normal.y > horizontalThreshold) {\n            // The plane is sufficiently horizontal\n            reticle.visible = true;\n            reticle.matrix.fromArray(hitPose.transform.matrix);\n          } else {\n            // The plane is not horizontal; hide the reticle\n            reticle.visible = false;\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n  \n    renderer.render(scene, camera);\n  }\n  \n\n  return (\n    <div className=\"App\"></div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}