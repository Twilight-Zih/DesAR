{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let controller;\n  let placedObjects = [];\n  const MIN_DISTANCE_BETWEEN_OBJECTS = 1; // Minimum distance between placed objects\n  const ROTATE_SPEED = 0.1; // Speed of rotation\n\n  let rotateLeftButton, rotateRightButton;\n  let rotatingObject = null; // The object currently being rotated\n  let isRotatingLeft = false;\n  let isRotatingRight = false;\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    // Light Estimation\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    // AR Button\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    // Load Models\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    scene.add(controller);\n\n    // Reticle\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    // Add Place Button\n    const placeButton = document.createElement(\"button\");\n    placeButton.innerText = \"Place\";\n    placeButton.className = \"place-button\";\n    placeButton.style.position = \"absolute\";\n    placeButton.style.bottom = \"230px\";\n    placeButton.style.left = \"50%\";\n    placeButton.style.transform = \"translateX(-50%)\";\n    placeButton.addEventListener(\"click\", onPlaceButtonClicked);\n    document.body.appendChild(placeButton);\n\n    // Add Rotate Left Button\n    rotateLeftButton = document.createElement(\"button\");\n    rotateLeftButton.innerText = \"Rotate Left\";\n    rotateLeftButton.className = \"rotate-button\";\n    rotateLeftButton.style.position = \"absolute\";\n    rotateLeftButton.style.bottom = \"180px\";\n    rotateLeftButton.style.left = \"40%\";\n    rotateLeftButton.style.transform = \"translateX(-50%)\";\n    rotateLeftButton.style.display = \"none\";\n    rotateLeftButton.addEventListener(\"mousedown\", () => {\n      isRotatingLeft = true;\n    });\n    rotateLeftButton.addEventListener(\"mouseup\", () => {\n      isRotatingLeft = false;\n    });\n    document.body.appendChild(rotateLeftButton);\n\n    // Add Rotate Right Button\n    rotateRightButton = document.createElement(\"button\");\n    rotateRightButton.innerText = \"Rotate Right\";\n    rotateRightButton.className = \"rotate-button\";\n    rotateRightButton.style.position = \"absolute\";\n    rotateRightButton.style.bottom = \"180px\";\n    rotateRightButton.style.left = \"60%\";\n    rotateRightButton.style.transform = \"translateX(-50%)\";\n    rotateRightButton.style.display = \"none\";\n    rotateRightButton.addEventListener(\"mousedown\", () => {\n      isRotatingRight = true;\n    });\n    rotateRightButton.addEventListener(\"mouseup\", () => {\n      isRotatingRight = false;\n    });\n    document.body.appendChild(rotateRightButton);\n  }\n  function onPlaceButtonClicked() {\n    if (reticle.visible) {\n      const newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      // Decompose reticle's position and apply to new model\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      if (canPlaceObject(newModel.position)) {\n        let scaleFactor = modelScaleFactor[itemSelectedIndex];\n        newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n        scene.add(newModel);\n        placedObjects.push(newModel.position.clone());\n      } else {\n        console.log(\"Object is too close to another object.\");\n      }\n    }\n  }\n  function canPlaceObject(position) {\n    for (let i = 0; i < placedObjects.length; i++) {\n      const distance = placedObjects[i].distanceTo(position);\n      if (distance < MIN_DISTANCE_BETWEEN_OBJECTS) {\n        return false; // Too close to another object\n      }\n    }\n\n    return true;\n  }\n  function rotateObject(object, direction) {\n    if (direction === \"left\") {\n      object.rotation.y += ROTATE_SPEED;\n    } else if (direction === \"right\") {\n      object.rotation.y -= ROTATE_SPEED;\n    }\n  }\n  const onClicked = (e, selectItem, index) => {\n    itemSelectedIndex = index;\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n    e.target.classList.add(\"clicked\");\n  };\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const matrix = hit.getPose(referenceSpace).transform.matrix;\n          const normal = new THREE.Vector3(matrix[4], matrix[5], matrix[6]);\n          const angleFromUp = normal.angleTo(new THREE.Vector3(0, 1, 0));\n          const verticalThreshold = THREE.MathUtils.degToRad(20);\n          if (angleFromUp < verticalThreshold) {\n            reticle.visible = true;\n            reticle.matrix.fromArray(matrix);\n\n            // Find closest placed object\n            rotatingObject = findClosestPlacedObject(reticle.position);\n            if (rotatingObject) {\n              // Show rotate buttons if object is nearby\n              rotateLeftButton.style.display = \"block\";\n              rotateRightButton.style.display = \"block\";\n            } else {\n              // Hide rotate buttons if no object is nearby\n              rotateLeftButton.style.display = \"none\";\n              rotateRightButton.style.display = \"none\";\n            }\n          } else {\n            reticle.visible = false;\n            rotateLeftButton.style.display = \"none\";\n            rotateRightButton.style.display = \"none\";\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n      if (rotatingObject) {\n        if (isRotatingLeft) {\n          rotateObject(rotatingObject, \"left\");\n        } else if (isRotatingRight) {\n          rotateObject(rotatingObject, \"right\");\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  function findClosestPlacedObject(position) {\n    let closestObject = null;\n    let closestDistance = MIN_DISTANCE_BETWEEN_OBJECTS;\n    scene.traverse(object => {\n      if (object.isMesh && placedObjects.includes(object.position)) {\n        const distance = object.position.distanceTo(position);\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestObject = object;\n        }\n      }\n    });\n    return closestObject;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","controller","placedObjects","MIN_DISTANCE_BETWEEN_OBJECTS","ROTATE_SPEED","rotateLeftButton","rotateRightButton","rotatingObject","isRotatingLeft","isRotatingRight","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","placeButton","createElement","innerText","className","left","transform","onPlaceButtonClicked","display","newModel","clone","matrix","decompose","quaternion","scale","canPlaceObject","scaleFactor","push","console","log","distance","distanceTo","rotateObject","object","direction","rotation","y","onClicked","e","selectItem","index","el","querySelector","classList","target","preventDefault","stopPropagation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","getPose","normal","Vector3","angleFromUp","angleTo","verticalThreshold","MathUtils","degToRad","fromArray","findClosestPlacedObject","closestObject","closestDistance","traverse","isMesh","includes","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n\n  let controller;\n\n  let placedObjects = [];\n  const MIN_DISTANCE_BETWEEN_OBJECTS = 1; // Minimum distance between placed objects\n  const ROTATE_SPEED = 0.1; // Speed of rotation\n\n  let rotateLeftButton, rotateRightButton;\n  let rotatingObject = null; // The object currently being rotated\n  let isRotatingLeft = false;\n  let isRotatingRight = false;\n\n  init();\n  setupFurnitureSelection();\n  animate();\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    // Light Estimation\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    // AR Button\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    // Load Models\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    scene.add(controller);\n\n    // Reticle\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    // Add Place Button\n    const placeButton = document.createElement(\"button\");\n    placeButton.innerText = \"Place\";\n    placeButton.className = \"place-button\";\n    placeButton.style.position = \"absolute\";\n    placeButton.style.bottom = \"230px\";\n    placeButton.style.left = \"50%\";\n    placeButton.style.transform = \"translateX(-50%)\";\n    placeButton.addEventListener(\"click\", onPlaceButtonClicked);\n    document.body.appendChild(placeButton);\n\n    // Add Rotate Left Button\n    rotateLeftButton = document.createElement(\"button\");\n    rotateLeftButton.innerText = \"Rotate Left\";\n    rotateLeftButton.className = \"rotate-button\";\n    rotateLeftButton.style.position = \"absolute\";\n    rotateLeftButton.style.bottom = \"180px\";\n    rotateLeftButton.style.left = \"40%\";\n    rotateLeftButton.style.transform = \"translateX(-50%)\";\n    rotateLeftButton.style.display = \"none\";\n    rotateLeftButton.addEventListener(\"mousedown\", () => {\n      isRotatingLeft = true;\n    });\n    rotateLeftButton.addEventListener(\"mouseup\", () => {\n      isRotatingLeft = false;\n    });\n    document.body.appendChild(rotateLeftButton);\n\n    // Add Rotate Right Button\n    rotateRightButton = document.createElement(\"button\");\n    rotateRightButton.innerText = \"Rotate Right\";\n    rotateRightButton.className = \"rotate-button\";\n    rotateRightButton.style.position = \"absolute\";\n    rotateRightButton.style.bottom = \"180px\";\n    rotateRightButton.style.left = \"60%\";\n    rotateRightButton.style.transform = \"translateX(-50%)\";\n    rotateRightButton.style.display = \"none\";\n    rotateRightButton.addEventListener(\"mousedown\", () => {\n      isRotatingRight = true;\n    });\n    rotateRightButton.addEventListener(\"mouseup\", () => {\n      isRotatingRight = false;\n    });\n    document.body.appendChild(rotateRightButton);\n  }\n\n  function onPlaceButtonClicked() {\n    if (reticle.visible) {\n      const newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      // Decompose reticle's position and apply to new model\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n\n      if (canPlaceObject(newModel.position)) {\n        let scaleFactor = modelScaleFactor[itemSelectedIndex];\n        newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n        scene.add(newModel);\n        placedObjects.push(newModel.position.clone());\n      } else {\n        console.log(\"Object is too close to another object.\");\n      }\n    }\n  }\n\n  function canPlaceObject(position) {\n    for (let i = 0; i < placedObjects.length; i++) {\n      const distance = placedObjects[i].distanceTo(position);\n      if (distance < MIN_DISTANCE_BETWEEN_OBJECTS) {\n        return false; // Too close to another object\n      }\n    }\n    return true;\n  }\n\n  function rotateObject(object, direction) {\n    if (direction === \"left\") {\n      object.rotation.y += ROTATE_SPEED;\n    } else if (direction === \"right\") {\n      object.rotation.y -= ROTATE_SPEED;\n    }\n  }\n\n  const onClicked = (e, selectItem, index) => {\n    itemSelectedIndex = index;\n\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    e.target.classList.add(\"clicked\");\n  };\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session\n            .requestHitTestSource({ space: referenceSpace })\n            .then(function (source) {\n              hitTestSource = source;\n            });\n        });\n\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n\n        hitTestSourceRequested = true;\n      }\n\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const matrix = hit.getPose(referenceSpace).transform.matrix;\n          const normal = new THREE.Vector3(matrix[4], matrix[5], matrix[6]);\n          const angleFromUp = normal.angleTo(new THREE.Vector3(0, 1, 0));\n          const verticalThreshold = THREE.MathUtils.degToRad(20);\n\n          if (angleFromUp < verticalThreshold) {\n            reticle.visible = true;\n            reticle.matrix.fromArray(matrix);\n\n            // Find closest placed object\n            rotatingObject = findClosestPlacedObject(reticle.position);\n\n            if (rotatingObject) {\n              // Show rotate buttons if object is nearby\n              rotateLeftButton.style.display = \"block\";\n              rotateRightButton.style.display = \"block\";\n            } else {\n              // Hide rotate buttons if no object is nearby\n              rotateLeftButton.style.display = \"none\";\n              rotateRightButton.style.display = \"none\";\n            }\n          } else {\n            reticle.visible = false;\n            rotateLeftButton.style.display = \"none\";\n            rotateRightButton.style.display = \"none\";\n          }\n        } else {\n          reticle.visible = false;\n        }\n      }\n\n      if (rotatingObject) {\n        if (isRotatingLeft) {\n          rotateObject(rotatingObject, \"left\");\n        } else if (isRotatingRight) {\n          rotateObject(rotatingObject, \"right\");\n        }\n      }\n    }\n\n    renderer.render(scene, camera);\n  }\n\n  function findClosestPlacedObject(position) {\n    let closestObject = null;\n    let closestDistance = MIN_DISTANCE_BETWEEN_OBJECTS;\n\n    scene.traverse((object) => {\n      if (object.isMesh && placedObjects.includes(object.position)) {\n        const distance = object.position.distanceTo(position);\n        if (distance < closestDistance) {\n          closestDistance = distance;\n          closestObject = object;\n        }\n      }\n    });\n\n    return closestObject;\n  }\n\n  return <div className=\"App\"></div>;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}