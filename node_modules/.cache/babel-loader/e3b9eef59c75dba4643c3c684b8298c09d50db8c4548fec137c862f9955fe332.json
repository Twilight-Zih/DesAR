{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n  let currentlySelectedObject = null;\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, [init, animate, setupFurnitureSelection]);\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n    window.addEventListener(\"click\", onClickObject, false); // Add click listener for placed objects\n  }\n\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some(object => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Detect tap and rotate or select an object\n  function onClickObject(event) {\n    const mouse = new THREE.Vector2();\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedObjects);\n    if (intersects.length > 0) {\n      const clickedObject = intersects[0].object;\n\n      // Show rotate buttons when an object is clicked\n      setShowRotateButtons(true);\n      currentlySelectedObject = clickedObject;\n    } else {\n      // Hide rotate buttons if no object is clicked\n      setShowRotateButtons(false);\n      currentlySelectedObject = null;\n    }\n  }\n\n  // Rotate the object by a specified angle (left or right)\n  function rotateObject(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -Math.PI / 16 : Math.PI / 16; // 11.25 degrees per click\n      currentlySelectedObject.rotation.y += angle;\n    }\n  }\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix and lock Y-axis to ground level (e.g., y = 0)\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: showRotateButtons && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-left\",\n        onClick: () => rotateObject(\"left\"),\n        children: \"\\u2B05\\uFE0F Rotate Left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rotate-button rotate-right\",\n        onClick: () => rotateObject(\"right\"),\n        children: \"\\u27A1\\uFE0F Rotate Right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T+hHi+Y65T3/UyAGi3PlPAr6LX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","controller","raycaster","Raycaster","currentlySelectedObject","showRotateButtons","setShowRotateButtons","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","onClickObject","newModel","clone","newPosition","Vector3","matrix","decompose","quaternion","scale","overlap","some","object","distance","distanceTo","console","log","scaleFactor","push","onClicked","e","selectItem","index","el","querySelector","classList","target","preventDefault","stopPropagation","event","mouse","Vector2","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","clickedObject","rotateObject","direction","angle","rotation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","hitMatrix","getPose","transform","fromArray","Quaternion","copy","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n  let currentlySelectedObject = null;\n\n  const [showRotateButtons, setShowRotateButtons] = useState(false); // State to show/hide rotate buttons\n\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n  }, [init, animate, setupFurnitureSelection]);\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    window.addEventListener(\"click\", onClickObject, false); // Add click listener for placed objects\n  }\n\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some((object) => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Detect tap and rotate or select an object\n  function onClickObject(event) {\n    const mouse = new THREE.Vector2();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(placedObjects);\n\n    if (intersects.length > 0) {\n      const clickedObject = intersects[0].object;\n\n      // Show rotate buttons when an object is clicked\n      setShowRotateButtons(true);\n      currentlySelectedObject = clickedObject;\n    } else {\n      // Hide rotate buttons if no object is clicked\n      setShowRotateButtons(false);\n      currentlySelectedObject = null;\n    }\n  }\n\n  // Rotate the object by a specified angle (left or right)\n  function rotateObject(direction) {\n    if (currentlySelectedObject) {\n      const angle = direction === \"left\" ? -Math.PI / 16 : Math.PI / 16; // 11.25 degrees per click\n      currentlySelectedObject.rotation.y += angle;\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session\n            .requestHitTestSource({ space: referenceSpace })\n            .then(function (source) {\n              hitTestSource = source;\n            });\n        });\n\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n\n        hitTestSourceRequested = true;\n      }\n\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix and lock Y-axis to ground level (e.g., y = 0)\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n\n    renderer.render(scene, camera);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* Rotate buttons */}\n      {showRotateButtons && (\n        <>\n          <button\n            className=\"rotate-button rotate-left\"\n            onClick={() => rotateObject(\"left\")}\n          >\n            ⬅️ Rotate Left\n          </button>\n          <button\n            className=\"rotate-button rotate-right\"\n            onClick={() => rotateObject(\"right\")}\n          >\n            ➡️ Rotate Right\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}