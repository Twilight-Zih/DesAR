{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n  let scene, camera, renderer;\n  let models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let doubleTapTime = 0; // Track the time for detecting double taps\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n\n  init();\n  setupFurnitureSelection();\n  animate();\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(70, myCanvas.innerWidth / myCanvas.innerHeight, 0.01, 20);\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n    reticle = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial());\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n    window.addEventListener(\"dblclick\", onDoubleTap, false); // Add double-tap listener\n  }\n\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some(object => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(newModel.position, newModel.quaternion, newModel.scale);\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Detect double-tap and remove the tapped object\n  function onDoubleTap(event) {\n    if (performance.now() - doubleTapTime < 300) {\n      // We have a double-tap\n      const mouse = new THREE.Vector2();\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(placedObjects);\n      if (intersects.length > 0) {\n        const objectToRemove = intersects[0].object;\n        scene.remove(objectToRemove);\n        placedObjects = placedObjects.filter(obj => obj !== objectToRemove);\n        console.log(\"Object removed on double-tap.\");\n      }\n    }\n    doubleTapTime = performance.now(); // Reset double-tap timer\n  }\n\n  // Rotate the object by a specified angle (e.g., 90 degrees around Y-axis)\n  function rotateObject(object, angle) {\n    object.rotation.y += angle;\n  }\n\n  // Example: Add a rotate button or trigger to call rotateObject\n  function onRotateButtonClick() {\n    if (placedObjects.length > 0) {\n      let lastPlacedObject = placedObjects[placedObjects.length - 1];\n      rotateObject(lastPlacedObject, Math.PI / 2); // Rotate by 90 degrees\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            hitTestSource = source;\n          });\n        });\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n        hitTestSourceRequested = true;\n      }\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix and lock Y-axis to ground level (e.g., y = 0)\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n    renderer.render(scene, camera);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRotateButtonClick,\n      children: \"Rotate Object\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["THREE","ARButton","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","reticle","hitTestSource","hitTestSourceRequested","scene","camera","renderer","models","modelScaleFactor","items","itemSelectedIndex","placedObjects","controller","doubleTapTime","raycaster","Raycaster","init","setupFurnitureSelection","animate","myCanvas","document","getElementById","Scene","PerspectiveCamera","innerWidth","innerHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","i","length","loader","load","glb","model","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","matrixAutoUpdate","visible","onDoubleTap","newModel","clone","newPosition","Vector3","matrix","decompose","quaternion","scale","overlap","some","object","distance","distanceTo","console","log","scaleFactor","push","onClicked","e","selectItem","index","el","querySelector","classList","target","preventDefault","stopPropagation","event","performance","now","mouse","Vector2","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","objectToRemove","filter","obj","rotateObject","angle","rotation","onRotateButtonClick","lastPlacedObject","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","hit","hitMatrix","getPose","transform","fromArray","Quaternion","copy","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\n\nfunction App() {\n  let reticle;\n  let hitTestSource = null;\n  let hitTestSourceRequested = false;\n\n  let scene, camera, renderer;\n  let models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  let modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n  let items = [];\n  let itemSelectedIndex = 0;\n  let placedObjects = []; // Track placed objects to prevent overlap\n\n  let controller;\n  let doubleTapTime = 0; // Track the time for detecting double taps\n  let raycaster = new THREE.Raycaster(); // For detecting objects tapped\n\n  init();\n  setupFurnitureSelection();\n  animate();\n\n  function init() {\n    let myCanvas = document.getElementById(\"canvas\");\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.innerWidth / myCanvas.innerHeight,\n      0.01,\n      20\n    );\n\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    scene.add(light);\n\n    renderer = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(myCanvas.innerWidth, myCanvas.innerHeight);\n    renderer.xr.enabled = true;\n\n    const xrLight = new XREstimatedLight(renderer);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      scene.add(xrLight);\n      scene.remove(light);\n      if (xrLight.environment) {\n        scene.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      scene.add(light);\n      scene.remove(xrLight);\n    });\n\n    let arButton = ARButton.createButton(renderer, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"20%\";\n    document.body.appendChild(arButton);\n\n    for (let i = 0; i < models.length; i++) {\n      const loader = new GLTFLoader();\n      loader.load(models[i], function (glb) {\n        let model = glb.scene;\n        items[i] = model;\n      });\n    }\n\n    controller = renderer.xr.getController(0);\n    controller.addEventListener(\"select\", onSelect);\n    scene.add(controller);\n\n    reticle = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial()\n    );\n    reticle.matrixAutoUpdate = false;\n    reticle.visible = false;\n    scene.add(reticle);\n\n    window.addEventListener(\"dblclick\", onDoubleTap, false); // Add double-tap listener\n  }\n\n  function onSelect() {\n    if (reticle.visible) {\n      let newModel = items[itemSelectedIndex].clone();\n      newModel.visible = true;\n\n      let newPosition = new THREE.Vector3();\n      reticle.matrix.decompose(newPosition, newModel.quaternion, newModel.scale);\n\n      // Check for overlap with existing objects\n      const overlap = placedObjects.some((object) => {\n        const distance = object.position.distanceTo(newPosition);\n        return distance < 0.5; // Adjust the threshold as necessary\n      });\n\n      if (overlap) {\n        console.log(\"Cannot place object: overlap detected.\");\n        return;\n      }\n\n      // Place the object if there's no overlap\n      reticle.matrix.decompose(\n        newModel.position,\n        newModel.quaternion,\n        newModel.scale\n      );\n      let scaleFactor = modelScaleFactor[itemSelectedIndex];\n      newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n      scene.add(newModel);\n      placedObjects.push(newModel); // Track placed objects\n    }\n  }\n\n  function onClicked(e, selectItem, index) {\n    itemSelectedIndex = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.classList.remove(\"clicked\");\n    }\n\n    // Set image to selected\n    e.target.classList.add(\"clicked\");\n  }\n\n  function setupFurnitureSelection() {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      el.addEventListener(\"beforexrselect\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n      el.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClicked(e, items[i], i);\n      });\n    }\n  }\n\n  // Detect double-tap and remove the tapped object\n  function onDoubleTap(event) {\n    if (performance.now() - doubleTapTime < 300) {\n      // We have a double-tap\n      const mouse = new THREE.Vector2();\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(placedObjects);\n\n      if (intersects.length > 0) {\n        const objectToRemove = intersects[0].object;\n        scene.remove(objectToRemove);\n        placedObjects = placedObjects.filter(obj => obj !== objectToRemove);\n        console.log(\"Object removed on double-tap.\");\n      }\n    }\n\n    doubleTapTime = performance.now(); // Reset double-tap timer\n  }\n\n  // Rotate the object by a specified angle (e.g., 90 degrees around Y-axis)\n  function rotateObject(object, angle) {\n    object.rotation.y += angle;\n  }\n\n  // Example: Add a rotate button or trigger to call rotateObject\n  function onRotateButtonClick() {\n    if (placedObjects.length > 0) {\n      let lastPlacedObject = placedObjects[placedObjects.length - 1];\n      rotateObject(lastPlacedObject, Math.PI / 2); // Rotate by 90 degrees\n    }\n  }\n\n  function animate() {\n    renderer.setAnimationLoop(render);\n  }\n\n  function render(timestamp, frame) {\n    if (frame) {\n      const referenceSpace = renderer.xr.getReferenceSpace();\n      const session = renderer.xr.getSession();\n\n      if (hitTestSourceRequested === false) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session\n            .requestHitTestSource({ space: referenceSpace })\n            .then(function (source) {\n              hitTestSource = source;\n            });\n        });\n\n        session.addEventListener(\"end\", function () {\n          hitTestSourceRequested = false;\n          hitTestSource = null;\n        });\n\n        hitTestSourceRequested = true;\n      }\n\n      if (hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(hitTestSource);\n\n        if (hitTestResults.length) {\n          const hit = hitTestResults[0];\n          const hitMatrix = hit.getPose(referenceSpace).transform.matrix;\n\n          reticle.visible = true;\n          reticle.matrix.fromArray(hitMatrix);\n\n          // Decompose the reticle matrix and lock Y-axis to ground level (e.g., y = 0)\n          const position = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n\n          reticle.matrix.decompose(position, quaternion, scale);\n          position.y = 0; // Lock Y-axis\n\n          reticle.position.copy(position);\n        } else {\n          reticle.visible = false;\n        }\n      }\n    }\n\n    renderer.render(scene, camera);\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={onRotateButtonClick}>Rotate Object</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}