{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIHAB\\\\OneDrive\\\\Desktop\\\\Final Year Mesh&Zih\\\\DesAR\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // References for mutable variables\n  const reticleRef = useRef();\n  const placedObjectsRef = useRef([]);\n  const itemsRef = useRef([]);\n  const controllerRef = useRef();\n  const raycasterRef = useRef(new THREE.Raycaster());\n  const doubleTapRef = useRef(0);\n  const isDraggingRef = useRef(false);\n  const selectedObjectRef = useRef(null);\n  const previousXRef = useRef(0);\n\n  // References for scene, camera, renderer\n  const sceneRef = useRef();\n  const cameraRef = useRef();\n  const rendererRef = useRef();\n\n  // Model paths and scale factors\n  const models = [\"./dylan_armchair_yolk_yellow.glb\", \"./ivan_armchair_mineral_blue.glb\", \"./marble_coffee_table.glb\", \"./flippa_functional_coffee_table_w._storagewalnut.glb\", \"./frame_armchairpetrol_velvet_with_gold_frame.glb\", \"./elnaz_nesting_side_tables_brass__green_marble.glb\"];\n  const modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n\n  // Reference to the currently selected item index\n  const itemSelectedIndex = useRef(0);\n\n  // Initialize the scene\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      rendererRef.current.dispose();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Initialize function\n  const init = () => {\n    const myCanvas = document.getElementById(\"canvas\");\n    sceneRef.current = new THREE.Scene();\n    cameraRef.current = new THREE.PerspectiveCamera(70, myCanvas.clientWidth / myCanvas.clientHeight, 0.01, 20);\n\n    // Add hemisphere light\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    sceneRef.current.add(light);\n\n    // Initialize renderer\n    rendererRef.current = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true\n    });\n    rendererRef.current.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n    rendererRef.current.xr.enabled = true;\n\n    // Add XR estimated light\n    const xrLight = new XREstimatedLight(rendererRef.current);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      sceneRef.current.add(xrLight);\n      sceneRef.current.remove(light);\n      if (xrLight.environment) {\n        sceneRef.current.environment = xrLight.environment;\n      }\n    });\n    xrLight.addEventListener(\"estimationend\", () => {\n      sceneRef.current.add(light);\n      sceneRef.current.remove(xrLight);\n    });\n\n    // Add AR button\n    const arButton = ARButton.createButton(rendererRef.current, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: {\n        root: document.body\n      }\n    });\n    arButton.style.bottom = \"25%\"; // Adjusted to make space for the Place button\n    document.body.appendChild(arButton);\n\n    // Load all models\n    const loader = new GLTFLoader();\n    models.forEach((modelPath, index) => {\n      loader.load(modelPath, function (glb) {\n        const model = glb.scene;\n        model.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        });\n        itemsRef.current[index] = model;\n        console.log(`Model loaded: ${modelPath}`);\n      }, undefined, function (error) {\n        console.error(`Error loading model ${modelPath}:`, error);\n      });\n    });\n\n    // Set up controller\n    controllerRef.current = rendererRef.current.xr.getController(0);\n    controllerRef.current.addEventListener(\"select\", onSelect);\n    sceneRef.current.add(controllerRef.current);\n\n    // Create reticle\n    reticleRef.current = new THREE.Mesh(new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2), new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n      opacity: 0.75,\n      transparent: true\n    }));\n    reticleRef.current.matrixAutoUpdate = false;\n    reticleRef.current.visible = false;\n    sceneRef.current.add(reticleRef.current);\n\n    // Add event listeners for double-tap and dragging\n    window.addEventListener(\"touchstart\", onDoubleTap, false); // For mobile\n    window.addEventListener(\"mousedown\", onPointerDown, false); // For desktop\n    window.addEventListener(\"mousemove\", onPointerMove, false);\n    window.addEventListener(\"mouseup\", onPointerUp, false);\n\n    // Handle window resize\n    window.addEventListener(\"resize\", onWindowResize, false);\n  };\n\n  // Handle window resize\n  const onWindowResize = () => {\n    const myCanvas = document.getElementById(\"canvas\");\n    cameraRef.current.aspect = myCanvas.clientWidth / myCanvas.clientHeight;\n    cameraRef.current.updateProjectionMatrix();\n    rendererRef.current.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n    console.log(\"Window resized.\");\n  };\n\n  // Handle object selection for placement via button\n  const handlePlaceButtonClick = () => {\n    if (!itemsRef.current[itemSelectedIndex.current]) {\n      console.log(\"No item selected to place.\");\n      return;\n    }\n    if (!reticleRef.current.visible) {\n      console.log(\"Reticle not visible. Cannot place object.\");\n      return;\n    }\n    const newModel = itemsRef.current[itemSelectedIndex.current].clone();\n    newModel.visible = true;\n    const newPosition = new THREE.Vector3();\n    const newQuaternion = new THREE.Quaternion();\n    const newScale = new THREE.Vector3();\n    reticleRef.current.matrix.decompose(newPosition, newQuaternion, newScale);\n\n    // Check for overlap with existing objects using bounding boxes\n    const newBox = new THREE.Box3().setFromObject(newModel);\n    newBox.applyMatrix4(reticleRef.current.matrix); // Position the box correctly\n\n    const overlap = placedObjectsRef.current.some(object => {\n      const existingBox = new THREE.Box3().setFromObject(object);\n      return existingBox.intersectsBox(newBox);\n    });\n    if (overlap) {\n      console.log(\"Cannot place object: overlap detected.\");\n      return;\n    }\n\n    // Place the object if there's no overlap\n    newModel.position.copy(newPosition);\n    newModel.quaternion.copy(newQuaternion);\n    const scaleFactor = modelScaleFactor[itemSelectedIndex.current];\n    newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n    sceneRef.current.add(newModel);\n    placedObjectsRef.current.push(newModel); // Track placed objects\n    console.log(\"Object placed via Place button.\");\n  };\n\n  // Handle object selection via AR controller (no longer used)\n  const onSelect = () => {\n    // This function is no longer used since placement is handled by the Place button\n  };\n\n  // Handle furniture selection from navbar\n  const onClicked = (e, selectItem, index) => {\n    itemSelectedIndex.current = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      if (el) {\n        el.classList.remove(\"clicked\");\n      }\n    }\n\n    // Set image to selected\n    if (e.target) {\n      e.target.classList.add(\"clicked\");\n      console.log(`Item selected: ${index}`);\n    }\n  };\n\n  // Set up furniture selection event listeners\n  const setupFurnitureSelection = () => {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      if (el) {\n        el.addEventListener(\"beforexrselect\", e => {\n          e.preventDefault();\n          e.stopPropagation();\n        });\n        el.addEventListener(\"click\", e => {\n          e.preventDefault();\n          e.stopPropagation();\n          onClicked(e, itemsRef.current[i], i);\n        });\n      } else {\n        console.warn(`Element #item${i} not found in index.html.`);\n      }\n    }\n  };\n\n  // Detect double-tap using touch events\n  const onDoubleTap = event => {\n    const currentTime = new Date().getTime();\n    const tapLength = currentTime - doubleTapRef.current;\n    if (tapLength < 300 && tapLength > 0) {\n      // Double-tap detected\n      handleObjectRemoval(event);\n      event.preventDefault();\n    }\n    doubleTapRef.current = currentTime;\n  };\n\n  // Remove object based on tap/click position\n  const handleObjectRemoval = event => {\n    let touchX, touchY;\n    if (event.touches && event.touches.length > 0) {\n      touchX = event.touches[0].clientX;\n      touchY = event.touches[0].clientY;\n    } else {\n      // For desktop\n      touchX = event.clientX;\n      touchY = event.clientY;\n    }\n    const mouse = new THREE.Vector2();\n    mouse.x = touchX / window.innerWidth * 2 - 1;\n    mouse.y = -(touchY / window.innerHeight) * 2 + 1;\n    raycasterRef.current.setFromCamera(mouse, cameraRef.current);\n    const intersects = raycasterRef.current.intersectObjects(placedObjectsRef.current, true);\n    if (intersects.length > 0) {\n      const intersected = intersects[0].object;\n      const objectToRemove = findTopLevelParent(intersected);\n      if (objectToRemove) {\n        sceneRef.current.remove(objectToRemove);\n        placedObjectsRef.current = placedObjectsRef.current.filter(obj => obj !== objectToRemove);\n        console.log(\"Object removed on double-tap.\");\n      }\n    }\n  };\n\n  // Helper function to find the top-level parent in placedObjects\n  const findTopLevelParent = child => {\n    let parent = child;\n    while (parent.parent && parent.parent !== sceneRef.current) {\n      parent = parent.parent;\n    }\n    if (placedObjectsRef.current.includes(parent)) {\n      return parent;\n    }\n    return null;\n  };\n\n  // Handle pointer down event for dragging-based rotation\n  const onPointerDown = event => {\n    isDraggingRef.current = true;\n    previousXRef.current = event.clientX || event.touches && event.touches[0].clientX;\n    console.log(\"Dragging started.\");\n    const mouse = new THREE.Vector2();\n    if (event.touches && event.touches.length > 0) {\n      mouse.x = event.touches[0].clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;\n    } else {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n    raycasterRef.current.setFromCamera(mouse, cameraRef.current);\n    const intersects = raycasterRef.current.intersectObjects(placedObjectsRef.current, true);\n    if (intersects.length > 0) {\n      selectedObjectRef.current = findTopLevelParent(intersects[0].object);\n      if (selectedObjectRef.current) {\n        console.log(\"Object selected for rotation.\");\n      }\n    }\n  };\n\n  // Handle pointer move event for dragging-based rotation\n  const onPointerMove = event => {\n    if (isDraggingRef.current && selectedObjectRef.current) {\n      const currentX = event.clientX || event.touches && event.touches[0].clientX;\n      const deltaX = currentX - previousXRef.current;\n      const rotationSpeed = 0.005; // Adjust rotation speed as needed\n      selectedObjectRef.current.rotation.y += deltaX * rotationSpeed;\n      previousXRef.current = currentX;\n      // console.log(`Rotating object by deltaX: ${deltaX}`);\n    }\n  };\n\n  // Handle pointer up event to end dragging\n  const onPointerUp = () => {\n    if (isDraggingRef.current) {\n      isDraggingRef.current = false;\n      selectedObjectRef.current = null;\n      console.log(\"Dragging ended.\");\n    }\n  };\n\n  // Animation loop\n  const animate = () => {\n    rendererRef.current.setAnimationLoop(render);\n  };\n\n  // Render function\n  const render = (timestamp, frame) => {\n    if (frame) {\n      const referenceSpace = rendererRef.current.xr.getReferenceSpace();\n      const session = rendererRef.current.xr.getSession();\n      if (!reticleRef.current.hitTestSourceRequested) {\n        session.requestReferenceSpace(\"viewer\").then(function (referenceSpace) {\n          session.requestHitTestSource({\n            space: referenceSpace\n          }).then(function (source) {\n            reticleRef.current.hitTestSource = source;\n          });\n        }).catch(err => console.error(err));\n        session.addEventListener(\"end\", function () {\n          reticleRef.current.hitTestSourceRequested = false;\n          reticleRef.current.hitTestSource = null;\n        });\n        reticleRef.current.hitTestSourceRequested = true;\n      }\n      if (reticleRef.current.hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(reticleRef.current.hitTestSource);\n        if (hitTestResults.length > 0) {\n          const hit = hitTestResults[0];\n          const hitPose = hit.getPose(referenceSpace);\n          const hitMatrix = new THREE.Matrix4().fromArray(hitPose.transform.matrix);\n\n          // Extract the normal vector from the hit matrix\n          const normal = new THREE.Vector3(0, 1, 0).applyQuaternion(new THREE.Quaternion().setFromRotationMatrix(hitMatrix));\n\n          // Define a threshold for how horizontal the plane should be\n          const horizontalThreshold = 0.6; // Adjust between 0 (vertical) to 1 (horizontal)\n\n          if (normal.y > horizontalThreshold) {\n            // The plane is sufficiently horizontal\n            reticleRef.current.visible = true;\n            reticleRef.current.matrix.fromArray(hitPose.transform.matrix);\n          } else {\n            // The plane is not horizontal; hide the reticle\n            reticleRef.current.visible = false;\n          }\n        } else {\n          reticleRef.current.visible = false;\n        }\n      }\n    }\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"place-button\",\n      onClick: handlePlaceButtonClick,\n      children: \"Place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hTNMLZO2yLxH+LOTWlfPEHbilv4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","THREE","ARButton","GLTFLoader","XREstimatedLight","jsxDEV","_jsxDEV","App","_s","reticleRef","placedObjectsRef","itemsRef","controllerRef","raycasterRef","Raycaster","doubleTapRef","isDraggingRef","selectedObjectRef","previousXRef","sceneRef","cameraRef","rendererRef","models","modelScaleFactor","itemSelectedIndex","init","setupFurnitureSelection","animate","current","dispose","myCanvas","document","getElementById","Scene","PerspectiveCamera","clientWidth","clientHeight","light","HemisphereLight","position","set","add","WebGLRenderer","canvas","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","xr","enabled","xrLight","addEventListener","remove","environment","arButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","body","style","bottom","appendChild","loader","forEach","modelPath","index","load","glb","model","scene","traverse","child","isMesh","castShadow","receiveShadow","console","log","undefined","error","getController","onSelect","Mesh","RingGeometry","rotateX","Math","PI","MeshBasicMaterial","color","opacity","transparent","matrixAutoUpdate","visible","onDoubleTap","onPointerDown","onPointerMove","onPointerUp","onWindowResize","aspect","updateProjectionMatrix","handlePlaceButtonClick","newModel","clone","newPosition","Vector3","newQuaternion","Quaternion","newScale","matrix","decompose","newBox","Box3","setFromObject","applyMatrix4","overlap","some","object","existingBox","intersectsBox","copy","quaternion","scaleFactor","scale","push","onClicked","e","selectItem","i","length","el","querySelector","classList","target","preventDefault","stopPropagation","warn","event","currentTime","Date","getTime","tapLength","handleObjectRemoval","touchX","touchY","touches","clientX","clientY","mouse","Vector2","x","innerWidth","y","innerHeight","setFromCamera","intersects","intersectObjects","intersected","objectToRemove","findTopLevelParent","filter","obj","parent","includes","currentX","deltaX","rotationSpeed","rotation","setAnimationLoop","render","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","hitTestSourceRequested","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestSource","catch","err","hitTestResults","getHitTestResults","hit","hitPose","getPose","hitMatrix","Matrix4","fromArray","transform","normal","applyQuaternion","setFromRotationMatrix","horizontalThreshold","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ZIHAB/OneDrive/Desktop/Final Year Mesh&Zih/DesAR/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport * as THREE from \"three\";\nimport { ARButton } from \"three/examples/jsm/webxr/ARButton\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { XREstimatedLight } from \"three/examples/jsm/webxr/XREstimatedLight\";\n\nfunction App() {\n  // References for mutable variables\n  const reticleRef = useRef();\n  const placedObjectsRef = useRef([]);\n  const itemsRef = useRef([]);\n  const controllerRef = useRef();\n  const raycasterRef = useRef(new THREE.Raycaster());\n  const doubleTapRef = useRef(0);\n  const isDraggingRef = useRef(false);\n  const selectedObjectRef = useRef(null);\n  const previousXRef = useRef(0);\n\n  // References for scene, camera, renderer\n  const sceneRef = useRef();\n  const cameraRef = useRef();\n  const rendererRef = useRef();\n\n  // Model paths and scale factors\n  const models = [\n    \"./dylan_armchair_yolk_yellow.glb\",\n    \"./ivan_armchair_mineral_blue.glb\",\n    \"./marble_coffee_table.glb\",\n    \"./flippa_functional_coffee_table_w._storagewalnut.glb\",\n    \"./frame_armchairpetrol_velvet_with_gold_frame.glb\",\n    \"./elnaz_nesting_side_tables_brass__green_marble.glb\",\n  ];\n  const modelScaleFactor = [0.01, 0.01, 0.005, 0.01, 0.01, 0.01];\n\n  // Reference to the currently selected item index\n  const itemSelectedIndex = useRef(0);\n\n  // Initialize the scene\n  useEffect(() => {\n    init();\n    setupFurnitureSelection();\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      rendererRef.current.dispose();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Initialize function\n  const init = () => {\n    const myCanvas = document.getElementById(\"canvas\");\n    sceneRef.current = new THREE.Scene();\n    cameraRef.current = new THREE.PerspectiveCamera(\n      70,\n      myCanvas.clientWidth / myCanvas.clientHeight,\n      0.01,\n      20\n    );\n\n    // Add hemisphere light\n    const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n    light.position.set(0.5, 1, 0.25);\n    sceneRef.current.add(light);\n\n    // Initialize renderer\n    rendererRef.current = new THREE.WebGLRenderer({\n      canvas: myCanvas,\n      antialias: true,\n      alpha: true,\n    });\n    rendererRef.current.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n    rendererRef.current.xr.enabled = true;\n\n    // Add XR estimated light\n    const xrLight = new XREstimatedLight(rendererRef.current);\n    xrLight.addEventListener(\"estimationstart\", () => {\n      sceneRef.current.add(xrLight);\n      sceneRef.current.remove(light);\n      if (xrLight.environment) {\n        sceneRef.current.environment = xrLight.environment;\n      }\n    });\n\n    xrLight.addEventListener(\"estimationend\", () => {\n      sceneRef.current.add(light);\n      sceneRef.current.remove(xrLight);\n    });\n\n    // Add AR button\n    const arButton = ARButton.createButton(rendererRef.current, {\n      requiredFeatures: [\"hit-test\"],\n      optionalFeatures: [\"dom-overlay\", \"light-estimation\"],\n      domOverlay: { root: document.body },\n    });\n    arButton.style.bottom = \"25%\"; // Adjusted to make space for the Place button\n    document.body.appendChild(arButton);\n\n    // Load all models\n    const loader = new GLTFLoader();\n    models.forEach((modelPath, index) => {\n      loader.load(\n        modelPath,\n        function (glb) {\n          const model = glb.scene;\n          model.traverse((child) => {\n            if (child.isMesh) {\n              child.castShadow = true;\n              child.receiveShadow = true;\n            }\n          });\n          itemsRef.current[index] = model;\n          console.log(`Model loaded: ${modelPath}`);\n        },\n        undefined,\n        function (error) {\n          console.error(`Error loading model ${modelPath}:`, error);\n        }\n      );\n    });\n\n    // Set up controller\n    controllerRef.current = rendererRef.current.xr.getController(0);\n    controllerRef.current.addEventListener(\"select\", onSelect);\n    sceneRef.current.add(controllerRef.current);\n\n    // Create reticle\n    reticleRef.current = new THREE.Mesh(\n      new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2),\n      new THREE.MeshBasicMaterial({\n        color: 0x00ff00,\n        opacity: 0.75,\n        transparent: true,\n      })\n    );\n    reticleRef.current.matrixAutoUpdate = false;\n    reticleRef.current.visible = false;\n    sceneRef.current.add(reticleRef.current);\n\n    // Add event listeners for double-tap and dragging\n    window.addEventListener(\"touchstart\", onDoubleTap, false); // For mobile\n    window.addEventListener(\"mousedown\", onPointerDown, false); // For desktop\n    window.addEventListener(\"mousemove\", onPointerMove, false);\n    window.addEventListener(\"mouseup\", onPointerUp, false);\n\n    // Handle window resize\n    window.addEventListener(\"resize\", onWindowResize, false);\n  };\n\n  // Handle window resize\n  const onWindowResize = () => {\n    const myCanvas = document.getElementById(\"canvas\");\n    cameraRef.current.aspect = myCanvas.clientWidth / myCanvas.clientHeight;\n    cameraRef.current.updateProjectionMatrix();\n    rendererRef.current.setSize(myCanvas.clientWidth, myCanvas.clientHeight);\n    console.log(\"Window resized.\");\n  };\n\n  // Handle object selection for placement via button\n  const handlePlaceButtonClick = () => {\n    if (!itemsRef.current[itemSelectedIndex.current]) {\n      console.log(\"No item selected to place.\");\n      return;\n    }\n\n    if (!reticleRef.current.visible) {\n      console.log(\"Reticle not visible. Cannot place object.\");\n      return;\n    }\n\n    const newModel = itemsRef.current[itemSelectedIndex.current].clone();\n    newModel.visible = true;\n\n    const newPosition = new THREE.Vector3();\n    const newQuaternion = new THREE.Quaternion();\n    const newScale = new THREE.Vector3();\n    reticleRef.current.matrix.decompose(newPosition, newQuaternion, newScale);\n\n    // Check for overlap with existing objects using bounding boxes\n    const newBox = new THREE.Box3().setFromObject(newModel);\n    newBox.applyMatrix4(reticleRef.current.matrix); // Position the box correctly\n\n    const overlap = placedObjectsRef.current.some((object) => {\n      const existingBox = new THREE.Box3().setFromObject(object);\n      return existingBox.intersectsBox(newBox);\n    });\n\n    if (overlap) {\n      console.log(\"Cannot place object: overlap detected.\");\n      return;\n    }\n\n    // Place the object if there's no overlap\n    newModel.position.copy(newPosition);\n    newModel.quaternion.copy(newQuaternion);\n    const scaleFactor = modelScaleFactor[itemSelectedIndex.current];\n    newModel.scale.set(scaleFactor, scaleFactor, scaleFactor);\n\n    sceneRef.current.add(newModel);\n    placedObjectsRef.current.push(newModel); // Track placed objects\n    console.log(\"Object placed via Place button.\");\n  };\n\n  // Handle object selection via AR controller (no longer used)\n  const onSelect = () => {\n    // This function is no longer used since placement is handled by the Place button\n  };\n\n  // Handle furniture selection from navbar\n  const onClicked = (e, selectItem, index) => {\n    itemSelectedIndex.current = index;\n\n    // Remove image selection from others to indicate unclicked\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      if (el) {\n        el.classList.remove(\"clicked\");\n      }\n    }\n\n    // Set image to selected\n    if (e.target) {\n      e.target.classList.add(\"clicked\");\n      console.log(`Item selected: ${index}`);\n    }\n  };\n\n  // Set up furniture selection event listeners\n  const setupFurnitureSelection = () => {\n    for (let i = 0; i < models.length; i++) {\n      const el = document.querySelector(`#item` + i);\n      if (el) {\n        el.addEventListener(\"beforexrselect\", (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        });\n        el.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          onClicked(e, itemsRef.current[i], i);\n        });\n      } else {\n        console.warn(`Element #item${i} not found in index.html.`);\n      }\n    }\n  };\n\n  // Detect double-tap using touch events\n  const onDoubleTap = (event) => {\n    const currentTime = new Date().getTime();\n    const tapLength = currentTime - doubleTapRef.current;\n    if (tapLength < 300 && tapLength > 0) {\n      // Double-tap detected\n      handleObjectRemoval(event);\n      event.preventDefault();\n    }\n    doubleTapRef.current = currentTime;\n  };\n\n  // Remove object based on tap/click position\n  const handleObjectRemoval = (event) => {\n    let touchX, touchY;\n    if (event.touches && event.touches.length > 0) {\n      touchX = event.touches[0].clientX;\n      touchY = event.touches[0].clientY;\n    } else {\n      // For desktop\n      touchX = event.clientX;\n      touchY = event.clientY;\n    }\n\n    const mouse = new THREE.Vector2();\n    mouse.x = (touchX / window.innerWidth) * 2 - 1;\n    mouse.y = -(touchY / window.innerHeight) * 2 + 1;\n\n    raycasterRef.current.setFromCamera(mouse, cameraRef.current);\n    const intersects = raycasterRef.current.intersectObjects(placedObjectsRef.current, true);\n\n    if (intersects.length > 0) {\n      const intersected = intersects[0].object;\n      const objectToRemove = findTopLevelParent(intersected);\n      if (objectToRemove) {\n        sceneRef.current.remove(objectToRemove);\n        placedObjectsRef.current = placedObjectsRef.current.filter((obj) => obj !== objectToRemove);\n        console.log(\"Object removed on double-tap.\");\n      }\n    }\n  };\n\n  // Helper function to find the top-level parent in placedObjects\n  const findTopLevelParent = (child) => {\n    let parent = child;\n    while (parent.parent && parent.parent !== sceneRef.current) {\n      parent = parent.parent;\n    }\n    if (placedObjectsRef.current.includes(parent)) {\n      return parent;\n    }\n    return null;\n  };\n\n  // Handle pointer down event for dragging-based rotation\n  const onPointerDown = (event) => {\n    isDraggingRef.current = true;\n    previousXRef.current = event.clientX || (event.touches && event.touches[0].clientX);\n    console.log(\"Dragging started.\");\n\n    const mouse = new THREE.Vector2();\n    if (event.touches && event.touches.length > 0) {\n      mouse.x = (event.touches[0].clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;\n    } else {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n\n    raycasterRef.current.setFromCamera(mouse, cameraRef.current);\n    const intersects = raycasterRef.current.intersectObjects(placedObjectsRef.current, true);\n\n    if (intersects.length > 0) {\n      selectedObjectRef.current = findTopLevelParent(intersects[0].object);\n      if (selectedObjectRef.current) {\n        console.log(\"Object selected for rotation.\");\n      }\n    }\n  };\n\n  // Handle pointer move event for dragging-based rotation\n  const onPointerMove = (event) => {\n    if (isDraggingRef.current && selectedObjectRef.current) {\n      const currentX = event.clientX || (event.touches && event.touches[0].clientX);\n      const deltaX = currentX - previousXRef.current;\n      const rotationSpeed = 0.005; // Adjust rotation speed as needed\n      selectedObjectRef.current.rotation.y += deltaX * rotationSpeed;\n\n      previousXRef.current = currentX;\n      // console.log(`Rotating object by deltaX: ${deltaX}`);\n    }\n  };\n\n  // Handle pointer up event to end dragging\n  const onPointerUp = () => {\n    if (isDraggingRef.current) {\n      isDraggingRef.current = false;\n      selectedObjectRef.current = null;\n      console.log(\"Dragging ended.\");\n    }\n  };\n\n  // Animation loop\n  const animate = () => {\n    rendererRef.current.setAnimationLoop(render);\n  };\n\n  // Render function\n  const render = (timestamp, frame) => {\n    if (frame) {\n      const referenceSpace = rendererRef.current.xr.getReferenceSpace();\n      const session = rendererRef.current.xr.getSession();\n\n      if (!reticleRef.current.hitTestSourceRequested) {\n        session\n          .requestReferenceSpace(\"viewer\")\n          .then(function (referenceSpace) {\n            session\n              .requestHitTestSource({ space: referenceSpace })\n              .then(function (source) {\n                reticleRef.current.hitTestSource = source;\n              });\n          })\n          .catch((err) => console.error(err));\n\n        session.addEventListener(\"end\", function () {\n          reticleRef.current.hitTestSourceRequested = false;\n          reticleRef.current.hitTestSource = null;\n        });\n\n        reticleRef.current.hitTestSourceRequested = true;\n      }\n\n      if (reticleRef.current.hitTestSource) {\n        const hitTestResults = frame.getHitTestResults(reticleRef.current.hitTestSource);\n\n        if (hitTestResults.length > 0) {\n          const hit = hitTestResults[0];\n          const hitPose = hit.getPose(referenceSpace);\n          const hitMatrix = new THREE.Matrix4().fromArray(hitPose.transform.matrix);\n\n          // Extract the normal vector from the hit matrix\n          const normal = new THREE.Vector3(0, 1, 0).applyQuaternion(\n            new THREE.Quaternion().setFromRotationMatrix(hitMatrix)\n          );\n\n          // Define a threshold for how horizontal the plane should be\n          const horizontalThreshold = 0.6; // Adjust between 0 (vertical) to 1 (horizontal)\n\n          if (normal.y > horizontalThreshold) {\n            // The plane is sufficiently horizontal\n            reticleRef.current.visible = true;\n            reticleRef.current.matrix.fromArray(hitPose.transform.matrix);\n          } else {\n            // The plane is not horizontal; hide the reticle\n            reticleRef.current.visible = false;\n          }\n        } else {\n          reticleRef.current.visible = false;\n        }\n      }\n    }\n\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Place Button Positioned Above the Navbar */}\n      <button className=\"place-button\" onClick={handlePlaceButtonClick}>\n        Place\n      </button>\n      {/* No additional elements */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}